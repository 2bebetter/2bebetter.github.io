<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2bebetter</title>
    <description>to be a better man
</description>
    <link>http://2bebetter.github.io/</link>
    <atom:link href="http://2bebetter.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 15 Mar 2021 09:41:23 +0800</pubDate>
    <lastBuildDate>Mon, 15 Mar 2021 09:41:23 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>基于时间序列的预测</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#基于时间序列的预测算法&quot; id=&quot;markdown-toc-基于时间序列的预测算法&quot;&gt;基于时间序列的预测算法&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#时间序列&quot; id=&quot;markdown-toc-时间序列&quot;&gt;时间序列&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#introduction-to-time-series-forecasting&quot; id=&quot;markdown-toc-introduction-to-time-series-forecasting&quot;&gt;Introduction to Time Series Forecasting&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#how-to-import-time-series-in-python&quot; id=&quot;markdown-toc-how-to-import-time-series-in-python&quot;&gt;How to import time series in python？&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#what-is-panel-data&quot; id=&quot;markdown-toc-what-is-panel-data&quot;&gt;What is panel data?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#可视化&quot; id=&quot;markdown-toc-可视化&quot;&gt;可视化&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#patterns-in-a-time-series&quot; id=&quot;markdown-toc-patterns-in-a-time-series&quot;&gt;Patterns in a time series&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#时间序列分解&quot; id=&quot;markdown-toc-时间序列分解&quot;&gt;时间序列分解&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#时间序列的平稳性&quot; id=&quot;markdown-toc-时间序列的平稳性&quot;&gt;时间序列的平稳性&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#arima&quot; id=&quot;markdown-toc-arima&quot;&gt;ARIMA&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#introduction-to-arima-models&quot; id=&quot;markdown-toc-introduction-to-arima-models&quot;&gt;Introduction to ARIMA models&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#what-does-the-p-d-and-q-in-arima-model-mean&quot; id=&quot;markdown-toc-what-does-the-p-d-and-q-in-arima-model-mean&quot;&gt;What does the p, d and q in ARIMA model mean&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;基于时间序列的预测算法&quot;&gt;基于时间序列的预测算法&lt;/h1&gt;

&lt;h2 id=&quot;时间序列&quot;&gt;时间序列&lt;/h2&gt;

&lt;h3 id=&quot;introduction-to-time-series-forecasting&quot;&gt;Introduction to Time Series Forecasting&lt;/h3&gt;

&lt;p&gt;时间序列是按常规时间间隔记录的一系列观测结果。&lt;/p&gt;

&lt;h3 id=&quot;how-to-import-time-series-in-python&quot;&gt;How to import time series in python？&lt;/h3&gt;

&lt;p&gt;时间系列的数据通常以.csv文件或其他电子表格格式存储，并包含两列：日期和观测值。&lt;/p&gt;

&lt;p&gt;使用包panda中的read_csv()函数来读取时间序列的数据集作为pandas的数据框架。添加parse_dates=[“日期”]参数将日期列解析为日期字段.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dateutil.parser&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt; 
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mpl&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;seaborn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sns&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rcParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;figure.figsize&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;figure.dpi&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Import as Dataframe&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;https://raw.githubusercontent.com/selva86/datasets/master/a10.csv&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_dates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;date&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/2021-03-12-time-series-forecasting/table_1-min.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;或者，可以用日期作为索引导入它作为panda系列，在pd.read_csv()中指定index_col参数。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;https://raw.githubusercontent.com/selva86/datasets/master/a10.csv&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_dates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;date&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index_col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;date&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/2021-03-12-time-series-forecasting/table_2-min.png&quot; alt=&quot;Series Timeseries&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在该系列中，”value”列的放置高于’date’，以表示它是一个系列。&lt;/p&gt;

&lt;h3 id=&quot;what-is-panel-data&quot;&gt;What is panel data?&lt;/h3&gt;

&lt;p&gt;panel data同样也是基于时间的数据集。不同的是，除了时间系列之外，它还包含一个或多个用于同一时间段的相关变量。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# dataset source: https://github.com/rouseguy&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;https://raw.githubusercontent.com/selva86/datasets/master/MarketArrivals.csv&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;market&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;MUMBAI&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/2021-03-12-time-series-forecasting/table_3-min-1024x231.png&quot; alt=&quot;Panel Data&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;可视化&quot;&gt;可视化&lt;/h3&gt;

&lt;p&gt;matplotlib&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Time series data source: fpp pacakge in R.&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;https://raw.githubusercontent.com/selva86/datasets/master/a10.csv&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parse_dates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;date&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index_col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;date&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Draw Plot&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;plot_df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;Date&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;Value&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dpi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dpi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dpi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;tab:red&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gca&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xlabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;plot_df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;Monthly anti-diabetic drug sales in Australia from 1992 to 2008.&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/2021-03-12-time-series-forecasting/1_visualizing_time_series-1024x360.png&quot; alt=&quot;Visualizing Time Series&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;patterns-in-a-time-series&quot;&gt;Patterns in a time series&lt;/h3&gt;

&lt;p&gt;Any time series may be split into the following components: &lt;strong&gt;Base Level + Trend + Seasonality + Error&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;(余额宝在2014-02-01~2014-07-31期间每日申购的总金额&lt;a href=&quot;https://tianchi.aliyun.com/competition/entrance/231573/information&quot;&gt;（数据来自天池大赛）&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2021-03-12-time-series-forecasting/v2-6e6a62447f35e3f1881f4229d06573be_720w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;趋势：&lt;/strong&gt;趋势是时间序列在某一方向上持续运动，现象是在较长时期内受某种根本性因素作用而形成的总的变动趋势。上图中可以看到从2014年2月到2014年4月，余额宝的申购资金一路下降，这是一个明显的趋势。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;季节变化：&lt;/strong&gt;许多时间序列中包含季节变化，现象是在一年内随着季节的变化而发生的有规律的周期性变动。上图中肉眼很难看出时间序列随季节变化，可以通过时间序列分解（STL）来展示序列中的季节变化。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;序列相关性：时间序列的一个最重要特征是序列相关性，又称为自相关性。&lt;/strong&gt;上图中可以看到，数据之间存在一定的正相关与负相关。例如某天的数据上升，它的前一天或者后一天也上升或者下降。&lt;strong&gt;自相关性是时间序列可以预测未来的前提（序列中存在的规律），如果没有自相关性，就变成了白噪声（无规律）。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;随机噪声：&lt;/strong&gt;它是时间序列中除去趋势、季节变化和自相关性之后的剩余随机扰动。由于时间序列存在不确定性，随机噪声总是夹杂在时间序列中，致使时间序列表现出某种震荡式的无规律运动。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;时间序列分析的核心就是挖掘该时间序列中的自相关性&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;注意：如何区分循环和季节性？&lt;/p&gt;

&lt;p&gt;如果模式不是基于固定日历的频率，则它是循环的。因为，与季节性不同，循环效应通常受商业和其他社会经济因素的影响。&lt;/p&gt;

&lt;h3 id=&quot;时间序列分解&quot;&gt;时间序列分解&lt;/h3&gt;

&lt;p&gt;大多数情况下，业务分析人员很难从高高低低的曲线中找到数据的规律。&lt;strong&gt;通过时间序列分解，可以帮助大家从时间序列的波动中挖掘信息。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;时间序列分解的成功与否，取决于两个因素：一是数据序列本身是隐藏着规律的，不可预测的部分只是其中的一小部分；二是分解的方法要合适，尤其是周期的判断要准确。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;时间序列的平稳性&quot;&gt;时间序列的平稳性&lt;/h3&gt;

&lt;p&gt;平稳性：时间序列的行为并不随时间而改变&lt;/p&gt;

&lt;p&gt;平稳性是时间序列分析的基本假设。&lt;/p&gt;

&lt;p&gt;那么，&lt;strong&gt;为什么&lt;/strong&gt;我们需要&lt;strong&gt;时间序列的统计性质&lt;/strong&gt;关于&lt;strong&gt;时间平移不变&lt;/strong&gt;呢？因为我们研究时间序列很重要的一个应用（或者出发点），是希望通过时间序列的&lt;strong&gt;历史数据&lt;/strong&gt;来得到其&lt;strong&gt;未来的一些预测&lt;/strong&gt;。换句话说，我们希望时间序列在&lt;strong&gt;历史数据上的一些性质，在将来保持不变&lt;/strong&gt;，这不就是时间平移的不变性么？反过来想，如果时间序列不是平稳的，由历史数据得到的统计性质对未来毫无意义，那么研究时间序列还有什么意义呢？&lt;/p&gt;

&lt;p&gt;参考文献：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/21982358&quot;&gt;1. 如何深入理解时间序列分析中的平稳性？&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;arima&quot;&gt;ARIMA&lt;/h2&gt;

&lt;h3 id=&quot;introduction-to-arima-models&quot;&gt;Introduction to ARIMA models&lt;/h3&gt;

&lt;p&gt;ARIMA, short for ‘Auto Regressive Integrated Moving Average’ is actually a class of models that ‘explains’ a given time series based on its own past values, that is, its own lags and the lagged forecast errors, so that equation can be used to forecast future values.&lt;/p&gt;

&lt;p&gt;任何显示模式而不是随机白噪声的”&lt;strong&gt;非季节性&lt;/strong&gt;“时间系列都可以使用 ARIMA 模型进行建模。如果是一个有季节性的时间序列，为ARIMA添加seasonal terms-&amp;gt;SARIMA。&lt;/p&gt;

&lt;p&gt;An ARIMA model is characterized by 3 terms: p, d, q&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;p is the order of the AR term&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;q is the order of the MA term&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;d is the number of differencing required to make the time series stationary&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-does-the-p-d-and-q-in-arima-model-mean&quot;&gt;What does the p, d and q in ARIMA model mean&lt;/h3&gt;

</description>
        <pubDate>Fri, 12 Mar 2021 10:21:40 +0800</pubDate>
        <link>http://2bebetter.github.io/thesis/2021/03/12/time-series-forecasting/</link>
        <guid isPermaLink="true">http://2bebetter.github.io/thesis/2021/03/12/time-series-forecasting/</guid>
        
        
        <category>thesis</category>
        
      </item>
    
      <item>
        <title>mininet+ryu搭建环境</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#面向软件定义网络的异常识别机制&quot; id=&quot;markdown-toc-面向软件定义网络的异常识别机制&quot;&gt;面向软件定义网络的异常识别机制&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#总体架构&quot; id=&quot;markdown-toc-总体架构&quot;&gt;总体架构&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#mininet&quot; id=&quot;markdown-toc-mininet&quot;&gt;Mininet&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#ryu&quot; id=&quot;markdown-toc-ryu&quot;&gt;Ryu&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#实验环境&quot; id=&quot;markdown-toc-实验环境&quot;&gt;实验环境&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;面向软件定义网络的异常识别机制&quot;&gt;面向软件定义网络的异常识别机制&lt;/h1&gt;

&lt;h2 id=&quot;总体架构&quot;&gt;总体架构&lt;/h2&gt;

&lt;p&gt;本文将会介绍该网络入侵检测系统的内部组成，包括路由转发模块、基于时间序列的预测模块、半监督的机器学习模块等。&lt;/p&gt;

&lt;p&gt;该系统的主要功能由mininet和ryu来实现，&lt;/p&gt;

&lt;p&gt;靶场平台由前端系统、调度系统、网络系统、终端系统（包括实物节点、数学节点、虚拟节点）、监控系统和流量系统构成。前端系统供用户创建演训演训场景（包括创建项目、画拓扑图、部署场景、3D展示等）；调度系统用于接收、解析前端系统下发的场景构建指令，并分别下发给除前端系统和自身外的其他系统进行实际部署；网络系统根据场景网络配置，基于SDN和NFV构建虚拟网络；终端系统各子系统分别根据各自终端配置部署终端节点；监控系统用于监控场景中的网络流量和终端流量；流量系统负责生成场景中的背景流量和特定攻击流量。&lt;/p&gt;

&lt;h3 id=&quot;mininet&quot;&gt;Mininet&lt;/h3&gt;

&lt;h3 id=&quot;ryu&quot;&gt;Ryu&lt;/h3&gt;

&lt;h3 id=&quot;实验环境&quot;&gt;实验环境&lt;/h3&gt;

</description>
        <pubDate>Thu, 11 Mar 2021 10:21:40 +0800</pubDate>
        <link>http://2bebetter.github.io/sdn/2021/03/11/mininet-ryu/</link>
        <guid isPermaLink="true">http://2bebetter.github.io/sdn/2021/03/11/mininet-ryu/</guid>
        
        
        <category>SDN</category>
        
      </item>
    
      <item>
        <title>SDN信息采集</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#umon-flexible-and-fine-grained-traffic-monitoring-in-open-vswitch&quot; id=&quot;markdown-toc-umon-flexible-and-fine-grained-traffic-monitoring-in-open-vswitch&quot;&gt;UMON: Flexible and Fine Grained Traffic Monitoring in Open vSwitch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#deepguard-efficient-anomaly-detection-in-sdn-with-fine-grained-traffic-flow-monitoring&quot; id=&quot;markdown-toc-deepguard-efficient-anomaly-detection-in-sdn-with-fine-grained-traffic-flow-monitoring&quot;&gt;DeepGuard: Efficient Anomaly Detection in SDN With Fine-Grained Traffic Flow Monitoring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#countermap-towards-generic-traffic-statistics-collection-and-query-in-software-defined-network&quot; id=&quot;markdown-toc-countermap-towards-generic-traffic-statistics-collection-and-query-in-software-defined-network&quot;&gt;CounterMap: Towards Generic Traffic Statistics Collection and Query in Software Defined Network&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#flow-monitoring-in-software-defined-networks&quot; id=&quot;markdown-toc-flow-monitoring-in-software-defined-networks&quot;&gt;Flow monitoring in Software-Defined Networks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#a-parallel-approach-for-detecting-openflow-rule-anomalies-based-on-a-general-formalism&quot; id=&quot;markdown-toc-a-parallel-approach-for-detecting-openflow-rule-anomalies-based-on-a-general-formalism&quot;&gt;A parallel approach for detecting OpenFlow rule anomalies based on a general formalism&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#deepguard-efficient-anomaly-detection-in-sdnwith-fine-grained-traffic-flow-monitoring太难了看不懂&quot; id=&quot;markdown-toc-deepguard-efficient-anomaly-detection-in-sdnwith-fine-grained-traffic-flow-monitoring太难了看不懂&quot;&gt;DEEPGUARD: Efficient Anomaly Detection in SDNWith Fine-Grained Traffic Flow Monitoring(太难了，看不懂)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#flowstat-adaptive-flow-rule-placement-for-per-flow-statistics-in-sdn&quot; id=&quot;markdown-toc-flowstat-adaptive-flow-rule-placement-for-per-flow-statistics-in-sdn&quot;&gt;FlowStat: Adaptive Flow-Rule Placement for Per-Flow Statistics in SDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;umon-flexible-and-fine-grained-traffic-monitoring-in-open-vswitch&quot;&gt;UMON: Flexible and Fine Grained Traffic Monitoring in Open vSwitch&lt;/h3&gt;

&lt;p&gt;来源：CoNEXT: International Conference on emerging Networking EXperiments and Technologies&lt;/p&gt;

&lt;p&gt;发表时间：2015&lt;/p&gt;

&lt;p&gt;分类：细化粒度&lt;/p&gt;

&lt;p&gt;提出问题：现有OVS监控工具既不灵活也不足以支持许多监控应用。&lt;/p&gt;

&lt;p&gt;主要贡献&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;设计UMON,将监控与转发分离，并在OVS中提供灵活和细粒度的监控&lt;/li&gt;
  &lt;li&gt;OVS架构完美集成在UMON&lt;/li&gt;
  &lt;li&gt;是UMON在可行的代价内完成监控&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;相关工作：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pyretic&lt;/li&gt;
  &lt;li&gt;基于流规则的测量结合动态粒度调整的策略，用于网络异常检测&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;deepguard-efficient-anomaly-detection-in-sdn-with-fine-grained-traffic-flow-monitoring&quot;&gt;DeepGuard: Efficient Anomaly Detection in SDN With Fine-Grained Traffic Flow Monitoring&lt;/h3&gt;

&lt;p&gt;来源：&lt;/p&gt;

&lt;p&gt;发表时间：&lt;/p&gt;

&lt;p&gt;分类：细化粒度 机器学习&lt;/p&gt;

&lt;p&gt;提出问题：&lt;/p&gt;

&lt;p&gt;主要贡献&lt;/p&gt;

&lt;p&gt;相关工作&lt;/p&gt;

&lt;h3 id=&quot;countermap-towards-generic-traffic-statistics-collection-and-query-in-software-defined-network&quot;&gt;CounterMap: Towards Generic Traffic Statistics Collection and Query in Software Defined Network&lt;/h3&gt;

&lt;p&gt;来源：IWQoS: IEEE/ACM International Symposium on Quality of Service&lt;/p&gt;

&lt;p&gt;发表时间：2017&lt;/p&gt;

&lt;p&gt;分类：网络流量测量&lt;/p&gt;

&lt;p&gt;提出问题：现缺少一个具有通用性的细粒度流量统计方法&lt;/p&gt;

&lt;p&gt;相关工作&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;传统的流量测量工具：NetFlow，sFlow，Sniffer和SNMP&lt;/li&gt;
  &lt;li&gt;流量收集方法：FlowSense、PayLess&lt;/li&gt;
  &lt;li&gt;OpenFlow和sFlow相结合进行异常检测&lt;/li&gt;
  &lt;li&gt;Frenetic、Pyretic&lt;/li&gt;
  &lt;li&gt;交换机调度策略：OpenTM、FlowCover&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;主要贡献：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;证明了过期流量对网络应用程序的重要性&lt;/li&gt;
  &lt;li&gt;设计并实现了CounterMap平台，用于收集SDNl流量统计和查询&lt;/li&gt;
  &lt;li&gt;提出了一种启发式交换机轮询算法用于减少交换机之间的计数器冗余&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;flow-monitoring-in-software-defined-networks&quot;&gt;Flow monitoring in Software-Defined Networks&lt;/h3&gt;

&lt;p&gt;来源：Computer Networks (Elsevier)&lt;/p&gt;

&lt;p&gt;发表年份：2018&lt;/p&gt;

&lt;p&gt;解决问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用OpenFlow实现流量监控的最直接方法是在交换机表中维护每个流的条目。通过这种方式，监控网络中的所有流量会产生很大的限制，因为现在OpenFlow交换机由于其有限的硬件资源（即TCAM条目数和处理能力）而不支持大量流条目&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;解决方案：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用OpenFlow实现流量采样并执行流级别流量分类，特别强调Web和加密流量的识别。&lt;/li&gt;
  &lt;li&gt;对于每个采样流，我们在交换机中维护一个流条目，记录持续时间以及数据包和字节数。&lt;/li&gt;
  &lt;li&gt;在交换机中初始安装一些规则，这些规则将自动操作以随机区分要采样的流量。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;a-parallel-approach-for-detecting-openflow-rule-anomalies-based-on-a-general-formalism&quot;&gt;A parallel approach for detecting OpenFlow rule anomalies based on a general formalism&lt;/h3&gt;

&lt;p&gt;解决问题：由于可以动态且经常快速地更新软件定义网络（SDN）网络的策略，因此很容易发生策略之间的冲突。由于典型的SDN网络中有大量的交换机和异构策略，因此检测这些冲突是一项艰巨而艰巨的任务。&lt;/p&gt;

&lt;h3 id=&quot;deepguard-efficient-anomaly-detection-in-sdnwith-fine-grained-traffic-flow-monitoring太难了看不懂&quot;&gt;DEEPGUARD: Efficient Anomaly Detection in SDNWith Fine-Grained Traffic Flow Monitoring(太难了，看不懂)&lt;/h3&gt;

&lt;p&gt;来源：&lt;/p&gt;

&lt;p&gt;发表时间：2020&lt;/p&gt;

&lt;p&gt;解决问题：&lt;/p&gt;

&lt;h3 id=&quot;flowstat-adaptive-flow-rule-placement-for-per-flow-statistics-in-sdn&quot;&gt;FlowStat: Adaptive Flow-Rule Placement for Per-Flow Statistics in SDN&lt;/h3&gt;

&lt;p&gt;来源：IEEE Journal on Selected Areas in Communications&lt;/p&gt;

&lt;p&gt;发表时间：2019&lt;/p&gt;

&lt;p&gt;解决问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;由于TCAM的限制，开关可以插入的流量规则的数量也受到限制。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;方法：&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Jan 2021 10:21:40 +0800</pubDate>
        <link>http://2bebetter.github.io/thesis/2021/01/03/SDN-detection/</link>
        <guid isPermaLink="true">http://2bebetter.github.io/thesis/2021/01/03/SDN-detection/</guid>
        
        
        <category>thesis</category>
        
      </item>
    
      <item>
        <title>Multidimensional detection and dynamic defense method for link flooding attack</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#12月赛&quot; id=&quot;markdown-toc-12月赛&quot;&gt;12月赛&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#misc&quot; id=&quot;markdown-toc-misc&quot;&gt;misc&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#capture&quot; id=&quot;markdown-toc-capture&quot;&gt;capture&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#crypto&quot; id=&quot;markdown-toc-crypto&quot;&gt;Crypto&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#affine&quot; id=&quot;markdown-toc-affine&quot;&gt;affine&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;12月赛&quot;&gt;12月赛&lt;/h2&gt;

&lt;p&gt;记12月月赛，虽然感觉这一天都好糟糕&lt;/p&gt;

&lt;h3 id=&quot;misc&quot;&gt;misc&lt;/h3&gt;

&lt;h4 id=&quot;capture&quot;&gt;capture&lt;/h4&gt;

&lt;p&gt;图片隐写题，binwalk查看该图片后发现里面有一个zip文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-12-19-ctf/image-20201219212901718.png&quot; alt=&quot;image-20201219212901718&quot; /&gt;&lt;/p&gt;

&lt;p&gt;使用dd if=misc_capture.jpg of=flag.zip skip=1230723 bs=1后分离出zip文件，打开该文件后果然发现其中有个flag.txt，但是想要查看该文件的内容时，却发现它被加密了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-12-19-ctf/image-20201219213047314.png&quot; alt=&quot;image-20201219213047314&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来有两个思路：（1）判断是否是伪加密；（2）尝试解密。&lt;/p&gt;

&lt;p&gt;（1）使用winhex修改后提示该文件已被损坏，判断不是伪加密。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-12-19-ctf/image-20201219213208434.png&quot; alt=&quot;image-20201219213208434&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（2）解密的思路也有两个流程，首先在图片文件中查找是否存在关于密码的提示，没有找到只能尝试暴力破解。&lt;/p&gt;

&lt;p&gt;使用azpr暴力破解后得到密码122947，这里绕了点弯子，因为没有找到提示，所以最开始使用了字母、数字、特殊字符暴力跑的，导致一直没有出结果，以为自己是哪里出了错。后来尝试只用数字之后，蛮快就出结果了，但还是没找到关于密码位数、组成的提醒orz。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-12-19-ctf/image-20201219213440374.png&quot; alt=&quot;image-20201219213440374&quot; /&gt;&lt;/p&gt;

&lt;p&gt;打开flag.txt文件后，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-12-19-ctf/image-20201219213654105.png&quot; alt=&quot;image-20201219213654105&quot; /&gt;&lt;/p&gt;

&lt;p&gt;之后就比较简单了，直接找一个在线解码工具即可，flag{doyouknowook}。&lt;/p&gt;

&lt;h3 id=&quot;crypto&quot;&gt;Crypto&lt;/h3&gt;

&lt;h4 id=&quot;affine&quot;&gt;affine&lt;/h4&gt;

</description>
        <pubDate>Sat, 19 Dec 2020 11:21:40 +0800</pubDate>
        <link>http://2bebetter.github.io/ctf/2020/12/19/ctf/</link>
        <guid isPermaLink="true">http://2bebetter.github.io/ctf/2020/12/19/ctf/</guid>
        
        
        <category>CTF</category>
        
      </item>
    
      <item>
        <title>Multidimensional detection and dynamic defense method for link flooding attack</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#multidimensional-detection-and-dynamic-defense-method-for-link-flooding-attack&quot; id=&quot;markdown-toc-multidimensional-detection-and-dynamic-defense-method-for-link-flooding-attack&quot;&gt;Multidimensional detection and dynamic defense method for link flooding attack&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#链路攻击&quot; id=&quot;markdown-toc-链路攻击&quot;&gt;链路攻击&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#coremelt&quot; id=&quot;markdown-toc-coremelt&quot;&gt;coremelt&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#crossfire&quot; id=&quot;markdown-toc-crossfire&quot;&gt;crossfire&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#methods&quot; id=&quot;markdown-toc-methods&quot;&gt;Methods&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#多维指标检测方法&quot; id=&quot;markdown-toc-多维指标检测方法&quot;&gt;多维指标检测方法&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#基于染色理论的动态部署算法&quot; id=&quot;markdown-toc-基于染色理论的动态部署算法&quot;&gt;基于染色理论的动态部署算法&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#experiment&quot; id=&quot;markdown-toc-experiment&quot;&gt;Experiment&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;multidimensional-detection-and-dynamic-defense-method-for-link-flooding-attack&quot;&gt;Multidimensional detection and dynamic defense method for link flooding attack&lt;/h2&gt;

&lt;h3 id=&quot;链路攻击&quot;&gt;链路攻击&lt;/h3&gt;

&lt;h4 id=&quot;coremelt&quot;&gt;coremelt&lt;/h4&gt;

&lt;h4 id=&quot;crossfire&quot;&gt;crossfire&lt;/h4&gt;

&lt;h3 id=&quot;methods&quot;&gt;Methods&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-12-04-thesis-reading-06/image-20201204155943072.png&quot; alt=&quot;image-20201204155943072&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;链路监听模块直接连接到数据平面与控制平面之间的链路，它将一直检测链路并感知可能存在的链路拥塞，一旦发现拥塞出现，则将预警信息发送给多维检测模块&lt;/li&gt;
  &lt;li&gt;多维检测模块在接收到预警信息后，首先对发生拥塞的链路进行定位和判断，若发生拥塞的链路存在构成闭合环路的可能，则对发生拥塞的链路进行检测。当多维检测模块检测到链路洪泛攻击后，将检测信息发送给动态部署模块&lt;/li&gt;
  &lt;li&gt;染色理论动态部署模块在接收到多维检测模块发送的检测信息后对控制器−交换机的连接关系进行迁移。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;多维指标检测方法&quot;&gt;多维指标检测方法&lt;/h4&gt;

&lt;p&gt;区分正常用户与恶意敌手的关键在于：正常用户不会发送大量的探测报文给目的节点，并且不会发送大量的探测报文。&lt;/p&gt;

&lt;p&gt;假设总有一个正常周期，该周期内只有正常用户的探测行为。在这个时间内，网络空间管理员可以计算正常探测的频率，从而作为参数的正常阈值，两个正常阙值的计算方式如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;源探测频率阈值：计算最大和最小源探测频率，并将两者在多日内的偏差作为平均标准探测偏差，记作$T_{diff}$ 。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;目的探测频率阈值：计算每个小时内目的节点收到的最大探测数量，并将该值在连续多日内的平均值作为阈值，记作$T_{dest}$&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果在任意一个小时内，其平均值超过了$T_{diff}$ 的两倍，则可以判定该探测行为是不正常的，且它可能是一个侦测攻击。下一个阈值用来判断哪个目标节点被攻击者探测。所有被判定进行侦测的僵尸节点用户将在现有情况或者未来检测中被 SDN 控制器认定是僵尸。&lt;/p&gt;

&lt;p&gt;通过会话长度（CL，connection length）、数据分组低速比例（LPR，low packet rate）、数据分组距离均匀性（PDU，packet distance uniformity）、平均低速率数据分组占比（LMPR，low mean packet rate）、低速数据分组占比变化率（LPRV，low packet rate variance）5 维要素对存在异常的转发链路进行多维检测。&lt;/p&gt;

&lt;h4 id=&quot;基于染色理论的动态部署算法&quot;&gt;基于染色理论的动态部署算法&lt;/h4&gt;

&lt;p&gt;通过部署异构交换机增加网络的动态性。&lt;/p&gt;

&lt;p&gt;在 SDN 中，控制器通常按照分域结构进行部署，每个域内网络由独立的一个或者一组控制器负责管理，该控制器（组）负责该子网交换机的管理、流表推送等。核心控制器（组）负责管理各个域内的控制器。&lt;/p&gt;

&lt;p&gt;需要指出的是，当按照控制器组进行管理时，组内仅有一个 Master 控制器，当该控制器出现故障时，组内按照选举算法选取出下一个 Master 控制器接管网络。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-12-04-thesis-reading-06/image-20201204161028660.png&quot; alt=&quot;image-20201204161028660&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;experiment&quot;&gt;Experiment&lt;/h3&gt;

&lt;p&gt;链路洪泛攻击检测实验和防御缓解实验。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;对比：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;多维指标 vs Renyi 熵&lt;/p&gt;

&lt;p&gt;相同交换机 vs 随机分布 vs 染色分布&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;性能测试：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-12-04-thesis-reading-06/image-20201204161429665.png&quot; alt=&quot;image-20201204161429665&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 04 Dec 2020 11:21:40 +0800</pubDate>
        <link>http://2bebetter.github.io/thesis/2020/12/04/thesis-reading-06/</link>
        <guid isPermaLink="true">http://2bebetter.github.io/thesis/2020/12/04/thesis-reading-06/</guid>
        
        
        <category>thesis</category>
        
      </item>
    
      <item>
        <title>Software-Defifined Networking Approaches for Link Failure Recovery: A Survey</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#software-defifined-networking-approaches-for-link-failure-recovery-a-survey&quot; id=&quot;markdown-toc-software-defifined-networking-approaches-for-link-failure-recovery-a-survey&quot;&gt;Software-Defifined Networking Approaches for Link Failure Recovery: A Survey&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#链路故障检测机制&quot; id=&quot;markdown-toc-链路故障检测机制&quot;&gt;链路故障检测机制&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#链路故障恢复机制&quot; id=&quot;markdown-toc-链路故障恢复机制&quot;&gt;链路故障恢复机制&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#proactive&quot; id=&quot;markdown-toc-proactive&quot;&gt;Proactive&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#reactive&quot; id=&quot;markdown-toc-reactive&quot;&gt;Reactive&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#laege-scale-sdn&quot; id=&quot;markdown-toc-laege-scale-sdn&quot;&gt;Laege-scale SDN&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#hybrid-sdn&quot; id=&quot;markdown-toc-hybrid-sdn&quot;&gt;Hybrid SDN&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;software-defifined-networking-approaches-for-link-failure-recovery-a-survey&quot;&gt;Software-Defifined Networking Approaches for Link Failure Recovery: A Survey&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://ideas.repec.org/a/gam/jsusta/v12y2020i10p4255-d361650.html&quot;&gt;Software-Defifined Networking Approaches for Link Failure Recovery: A Survey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SDN使用主动和被动两种主要方法来处理链路故障。&lt;/p&gt;

&lt;p&gt;在主动方法中，备用路径是预先配置的，并且在链路故障的情况下，中断的流将转发到备份路径，不需要与控制器进行交互。&lt;/p&gt;

&lt;p&gt;相反，在反应性方案中即被动方法中，需要与控制器联系以寻找替代路径，在控制器计算路径结束之后，重新下发新路径的流表规则。&lt;/p&gt;

&lt;p&gt;但是，这两种方案都有其优缺点，同时还要在性能和效率上进行权衡。&lt;/p&gt;

&lt;h3 id=&quot;链路故障检测机制&quot;&gt;链路故障检测机制&lt;/h3&gt;

&lt;p&gt;SDN中的故障恢复过程从检测到链路故障开始，如果检测迅速，那么整个恢复过程的总延迟将很小，这就是为什么检测方案对整个过程如此重要。&lt;/p&gt;

&lt;p&gt;下表概述了链路故障检测机制，故障链路的检测方法以及检测方案中的相关问题。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在[32，33]中提出的方案使用监视周期的概念来减少链路故障恢复时间。在参考文献[32]中，引入了二进制搜索技术以最小化路径上的跳数。&lt;/li&gt;
  &lt;li&gt;类似地，在参考文献[33,34]中，使用启发式方法[35]将监视分配公式化为邮递员问题，以分配监视周期。&lt;/li&gt;
  &lt;li&gt;OpenFlow使用了与以太网相同的检测信号的机制，通过在节点之间以固定的时间间隔交换心跳消息来确定网络的状态，通过节点之间的hello数据包的交换速率来检查活动性。因此，如果节点在16±8 ms的常规时间间隔内未收到hello数据包，则会向控制器通知发生故障的链路。&lt;/li&gt;
  &lt;li&gt;生成树协议（STP）[38]和反向生成树协议（RSTP）也已在数据链路层上用于链路故障检测。但是，它们的检测时间跨度为几秒钟，不能保证现代技术的延迟要求。&lt;/li&gt;
  &lt;li&gt;SDN社区[36,40,41]中也常规提供OpenFlow快速故障转移（FF）组[1]和双向转发检测（BFD）[39]，用于链路故障检测和恢复。&lt;/li&gt;
  &lt;li&gt;在[42]中提出了一种故障检测机制，称为低错误率故障检测服务（FDLM），它使用心跳消息将检测中的错误最小化。&lt;/li&gt;
  &lt;li&gt;使用多协议标签交换（MPLS）BFD来检测端到端路径中传输网络的故障。该方案通过与数据包一起发送探测消息，当连续的探测消息之间存在间隙时，认为检测到链路故障。&lt;/li&gt;
  &lt;li&gt;在[45]中提出了一种使用基于out 数据包的计数器机制的故障检测方法。对链接上安装的流规则进行标记和监视，然后在目标位置对数据包进行计数。&lt;/li&gt;
  &lt;li&gt;交换机级别的故障检测方案[47]被称为交换机故障检测（SFD），使用故障链路和网络拓扑作为输入。为了识别故障交换机，该算法首先找到故障链路的源和目的地。然后，发现与交换机连接的所有主机，并计算丢包率是否为100％。(&lt;strong&gt;仅限节点故障&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-25-thesis-reading-05/image-20201125192853820.png&quot; alt=&quot;image-20201125192853820&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;链路故障恢复机制&quot;&gt;链路故障恢复机制&lt;/h3&gt;

&lt;h4 id=&quot;proactive&quot;&gt;Proactive&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-25-thesis-reading-05/image-20201125202420813.png&quot; alt=&quot;image-20201125202420813&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;OpenFlow提供了Fast-FailOver用于故障检测和恢复。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;BFD&lt;/li&gt;
  &lt;li&gt;SPIDER&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;reactive&quot;&gt;Reactive&lt;/h4&gt;

&lt;p&gt;响应式故障恢复主要依靠SDN控制器。&lt;/p&gt;

&lt;p&gt;这种方法的反对者声称反应式方案不能满足CGN的延迟范围，即50毫秒。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-25-thesis-reading-05/image-20201125210823088.png&quot; alt=&quot;image-20201125210823088&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;laege-scale-sdn&quot;&gt;Laege-scale SDN&lt;/h4&gt;

&lt;p&gt;利用图论对网络进行裁剪。&lt;/p&gt;

&lt;p&gt;Distributed controller clustering in software defifined networks.&lt;/p&gt;

&lt;h4 id=&quot;hybrid-sdn&quot;&gt;Hybrid SDN&lt;/h4&gt;

</description>
        <pubDate>Wed, 25 Nov 2020 11:21:40 +0800</pubDate>
        <link>http://2bebetter.github.io/thesis/2020/11/25/thesis-reading-05/</link>
        <guid isPermaLink="true">http://2bebetter.github.io/thesis/2020/11/25/thesis-reading-05/</guid>
        
        
        <category>thesis</category>
        
      </item>
    
      <item>
        <title>Rapid Restoration Techniques for Software-Defined Networks</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#enhanced-optimal-placements-of-multi-controllers-in-sdn&quot; id=&quot;markdown-toc-enhanced-optimal-placements-of-multi-controllers-in-sdn&quot;&gt;Enhanced optimal placements of multi-controllers in SDN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rapid-restoration-techniques-for-software-defined-networks&quot; id=&quot;markdown-toc-rapid-restoration-techniques-for-software-defined-networks&quot;&gt;Rapid Restoration Techniques for Software-Defined Networks&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#problem&quot; id=&quot;markdown-toc-problem&quot;&gt;Problem&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#proposal-methods&quot; id=&quot;markdown-toc-proposal-methods&quot;&gt;Proposal Methods&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#path-recover&quot; id=&quot;markdown-toc-path-recover&quot;&gt;Path recover&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#methods&quot; id=&quot;markdown-toc-methods&quot;&gt;Methods&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#experiment&quot; id=&quot;markdown-toc-experiment&quot;&gt;Experiment&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://link.springer.com/article/10.1007/s12652-020-02554-2&quot;&gt;Enhanced optimal placements of multi-controllers in SDN&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;enhanced-optimal-placements-of-multi-controllers-in-sdn&quot;&gt;Enhanced optimal placements of multi-controllers in SDN&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.mdpi.com/2076-3417/10/10/3411&quot;&gt;Rapid Restoration Techniques for Software-Defined Networks&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;rapid-restoration-techniques-for-software-defined-networks&quot;&gt;Rapid Restoration Techniques for Software-Defined Networks&lt;/h2&gt;

&lt;h3 id=&quot;problem&quot;&gt;Problem&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;网络元素容易发生故障，从故障中恢复既可以主动实现（也称为保护），也可以被动地实现（也称为恢复）。在保护方面，替代解决方案是在发生故障之前预先计划和保留的。但是在恢复中，解决方案不是预先计划的，当发生故障时需要动态按需计算。&lt;/li&gt;
  &lt;li&gt;保护机制很昂贵，而且备份路径可能比主路径更快失效&lt;/li&gt;
  &lt;li&gt;恢复机制很耗时：（1）计算新路径的时间 （2）更新新路径上的交换机的时间&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;proposal-methods&quot;&gt;Proposal Methods&lt;/h3&gt;

&lt;h4 id=&quot;path-recover&quot;&gt;Path recover&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;网络模型&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;无向图&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Community Detection(CD)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CD可以将具有共同属性的节点组表示为社区。在这里，每个社区被定义为一个子图，其中的节点密集连接，但与网络的其余部分稀疏连接。&lt;/p&gt;

&lt;p&gt;目前已经提出的算法：Louvain算法    Girvan     Newman算法&lt;/p&gt;

&lt;p&gt;通过将网络图G划分为N个社区，我们假设当发生链路故障事件时，只有一个社区会遭受该特定故障。在大部分链路故障情况下，这种假设是合理的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CD模型&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;社区检测算法提取的社区数量取决于网络拓扑结构和社区检测算法的参数化。&lt;/p&gt;

&lt;p&gt;假设路径上连续的路由器必定位于同一社区中。根据Dijkstra算法计算节点之间的最短路径：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P_{Dset} = {P | ∀ r_1,r_d ∈ V : P = D(P_{1,r_d} )}&lt;/script&gt;

&lt;p&gt;其中$P_{r_1，r_d}$表示任意两个特定节点之间的所有可能路径的集合。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-24-thesis-reading-04/image-20201124190517565.png&quot; alt=&quot;示例&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Path Anatomy-Based Approach&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;控制器首先在受影响的路径上的交换机中删除旧流表条目，然后为备用路径下发所需的规则。当受影响路径的长度较长时，此过程很耗时。网络路径解剖（PA）是此问题的潜在解决方案。&lt;/p&gt;

&lt;p&gt;相邻路由器的此序列具有一些中间路由器，称为$r_m$，路径P可被分为两段：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-24-thesis-reading-04/image-20201124192229346.png&quot; alt=&quot;image-20201124192229346&quot; /&gt;&lt;/p&gt;

&lt;p&gt;找到从$r_1$到$r_d$的新路径以克服故障并不是有效的解决方案，因为规则替换和更新的成本可能很高。&lt;/p&gt;

&lt;p&gt;基于PA可以实现两种方法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第一个使用P的中间路由器来考虑两个部分（即子路径），其中一个正在运行，而另一个没有运行（譬如由于故障）。这意味着受影响路径的一个分段仍可以按原样使用，并且更新该分段的操作成本为零。&lt;/li&gt;
  &lt;li&gt;在第二种方案中，并不使用新的子路径替换路径的故障段，而是将备用路径的搜索空间减少到仅在围绕故障链路的两个节点之间。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;methods&quot;&gt;Methods&lt;/h3&gt;

&lt;p&gt;四个组件：&lt;em&gt;SDN Controller&lt;/em&gt; 、&lt;em&gt;Topology Parser&lt;/em&gt; 、&lt;em&gt;Global Recovery Scheme&lt;/em&gt; 、&lt;em&gt;Community Detection&lt;/em&gt;、&lt;em&gt;Path Anatomy&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;使用Girvan和Newman将网络拓扑图G的虚拟分区创建为C。&lt;/p&gt;

&lt;p&gt;根据Dijkstra算法开发了两种算法来满足所有的路径查找需求：&lt;/p&gt;

&lt;p&gt;（1）新数据包到达需要计算新路径&lt;/p&gt;

&lt;p&gt;（2）路由故障需要计算新路径&lt;/p&gt;

&lt;h3 id=&quot;experiment&quot;&gt;Experiment&lt;/h3&gt;

&lt;p&gt;三个评估指标：length、operation、latency。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;length表示表示在链路发生故障时与恢复解决方案时找到的新路径相关的跃点数。&lt;/li&gt;
  &lt;li&gt;operation包括添加，删除和修改流条目。&lt;/li&gt;
  &lt;li&gt;latency表示安装备用路径所需的时间。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为了评估不同的恢复算法，使用了三种实际的网络拓扑结构-网络存储库中的ERnet ，German50和NR。论文使用Internet拓扑生成器Brite [39]来生成其他拓扑，
利用Waxman算法基于Brite生成随机图。&lt;/p&gt;

&lt;p&gt;使用Mininet仿真作为实验环境。&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Nov 2020 10:21:40 +0800</pubDate>
        <link>http://2bebetter.github.io/thesis/2020/11/24/thesis-reading-04/</link>
        <guid isPermaLink="true">http://2bebetter.github.io/thesis/2020/11/24/thesis-reading-04/</guid>
        
        
        <category>thesis</category>
        
      </item>
    
      <item>
        <title>Controller placements for latency minimization of both primary and backup paths in SDNs</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#controller-placements-for-latency-minimization-of-both-primary-and-backup-paths-in-sdns&quot; id=&quot;markdown-toc-controller-placements-for-latency-minimization-of-both-primary-and-backup-paths-in-sdns&quot;&gt;Controller placements for latency minimization of both primary and backup paths in SDNs&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#problem&quot; id=&quot;markdown-toc-problem&quot;&gt;Problem&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#methods&quot; id=&quot;markdown-toc-methods&quot;&gt;Methods&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#流程&quot; id=&quot;markdown-toc-流程&quot;&gt;流程&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#experiment&quot; id=&quot;markdown-toc-experiment&quot;&gt;Experiment&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#limits&quot; id=&quot;markdown-toc-limits&quot;&gt;Limits&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S0140366420319150&quot;&gt;Controller placements for latency minimization of both primary and backup paths in SDNs&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;controller-placements-for-latency-minimization-of-both-primary-and-backup-paths-in-sdns&quot;&gt;Controller placements for latency minimization of both primary and backup paths in SDNs&lt;/h2&gt;

&lt;h3 id=&quot;problem&quot;&gt;Problem&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;主路径延迟和备用路径延迟的两个目标本质上是冲突的。假设网络是理想的，则倾向于将控制器放置在靠近交换机的位置，以减少主要路径上交换机到控制器之间的延迟。但是，由于发生链接故障时绕行路径较长，因此备用路径延迟可能会很高。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;methods&quot;&gt;Methods&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;提出了一种新颖的多目标SDN控制器放置问题，以在没有链路故障和同时发生单链路故障的情况下将切换到控制器的通信延迟降到最低。&lt;/li&gt;
  &lt;li&gt;提出了一种有效的基于元启发式的可靠性感知和面向延迟的控制器放置算法（RALO），用于多目标多控制器放置。该算法通过具有网络分区的贪婪方法构造初始可行解，然后通过可变邻域搜索重复编辑生成新解。同时，为了避免陷入局部最优，该算法对当前解执行微扰和破坏操作。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;根据各种限制条件抽象成数学表达式，包含约束条件和目标函数，之后为该NP问题提出一个算法解。通过将网络节点划分为多个交换机子集并根据交换机到控制器的通信延迟和控制器处理能力在每个交换机子集中分配一个控制器来构造一个初始可行的解决方案，之后使用可变邻域搜索(VNS)生成新的解决方案，检验该方案是否是可行解，并更新不符合条件的方案。&lt;/p&gt;

&lt;h3 id=&quot;流程&quot;&gt;流程&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph TD;
	Initial_solution_construction -- searches the neighborhood to generate new feasible solutions --&amp;gt; Variable_neighborhood_search;

	Variable_neighborhood_search -- Perturbation reassigns some of the switches to other controllers for each node subset --&amp;gt; Perturbation;
	
	Perturbation -- Controller relocation attempts to increase the performance of &amp;lt;br&amp;gt; the feasible solutions by moving a controller to a different position &amp;lt;br&amp;gt; in the same node subset --&amp;gt;  Controller_relocation;
	
	 Controller_relocation-- Shake destroys the current solution significantly &amp;lt;br&amp;gt; so that the solution can jump to a solution space far away. &amp;lt;br&amp;gt; Shake attempts to find better controllers for the nodes with the &amp;lt;br&amp;gt; largest node-to-controller communication delay in each subset. --&amp;gt; Shake;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;算法的初始可行解决方案的构建流程：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;构造分为两个步骤：节点子集划分和控制器在每个节点子集中的放置。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;算法1继续在参数𝑟𝑚𝑎𝑥确定的最大迭代次数内迭代找到新解。在每次迭代期间，扰动控制器和开关之间的映射关系，并执行变量邻域搜索，然后改变控制器的位置。&lt;/li&gt;
  &lt;li&gt;如果当前解比所有找到的Pareto最优解差，则当前解决方案会受到Shakes的极大干扰，因此该解可以跳到另一个解空间以避免陷入局部最优。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-23-thesis-reading-03/image-20201123174210356.png&quot; alt=&quot;image-20201123174210356&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;每次找到潜在的控制器位置后，算法2会更新所有节点的𝐿𝑖，然后选择具有最大𝐿𝑖的节点作为下一个潜在的控制器位置；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-23-thesis-reading-03/image-20201123192701939.png&quot; alt=&quot;image-20201123192701939&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;算法3在算法2获得的每个节点子集中选择每个控制器的位置，并在约束条件下将每个节点映射到控制器。在算法3中，将两跳中的节点当中具有最大请求数的那个节点选为每个子集中的控制器位置。该算法按请求数量的非升序对每个子集𝑆𝑘中的所有其他节点进行排序，并在控制器的约束下将每个节点分配给控制器。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-23-thesis-reading-03/image-20201123193640292.png&quot; alt=&quot;image-20201123193640292&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;experiment&quot;&gt;Experiment&lt;/h3&gt;

&lt;p&gt;在仿真中使用的网络拓扑是Internet拓扑zoo中的8种实际网络拓扑，以及由斯坦福网络分析平台（SNAP）生成的两种网络拓扑（生成网络I和生成网络II）。生成网络I是符合ER（Erdos-Renyi）随机模型的一组网络拓扑，而生成网络II是符合小世界模型的一组网络拓扑。每种生成网络均包含10种网络拓扑。&lt;/p&gt;

&lt;p&gt;文章共比较了LARC、RALO、PSA、Survivor和OPT共五种算法在主要路径和备份路径上的平均延时和累计延时，以及运行时间等评估指标上的差异。&lt;/p&gt;

&lt;h3 id=&quot;limits&quot;&gt;Limits&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;假设网络中最多存在一个链路故障，因为网络中多链路故障的可能性很小。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 23 Nov 2020 10:21:40 +0800</pubDate>
        <link>http://2bebetter.github.io/thesis/2020/11/23/thesis-reading-03/</link>
        <guid isPermaLink="true">http://2bebetter.github.io/thesis/2020/11/23/thesis-reading-03/</guid>
        
        
        <category>thesis</category>
        
      </item>
    
      <item>
        <title>在Django项目中使用Celery+Rabbitmq</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#background&quot; id=&quot;markdown-toc-background&quot;&gt;background&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#celery&quot; id=&quot;markdown-toc-celery&quot;&gt;celery&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#rabbitmq&quot; id=&quot;markdown-toc-rabbitmq&quot;&gt;rabbitmq&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#virtualenv&quot; id=&quot;markdown-toc-virtualenv&quot;&gt;virtualenv&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#run&quot; id=&quot;markdown-toc-run&quot;&gt;Run&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#using-virtualenv&quot; id=&quot;markdown-toc-using-virtualenv&quot;&gt;Using virtualenv&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#using-rabbitmq-with-celery&quot; id=&quot;markdown-toc-using-rabbitmq-with-celery&quot;&gt;Using rabbitmq with celery&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#install-rabbitmq&quot; id=&quot;markdown-toc-install-rabbitmq&quot;&gt;install rabbitmq&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#configure-rabbitmq&quot; id=&quot;markdown-toc-configure-rabbitmq&quot;&gt;configure rabbitmq&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#using-celery-in-django&quot; id=&quot;markdown-toc-using-celery-in-django&quot;&gt;Using celery in django&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#run-1&quot; id=&quot;markdown-toc-run-1&quot;&gt;Run&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在Django项目中使用celery+rabbitmq。&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;background&lt;/h2&gt;

&lt;h3 id=&quot;celery&quot;&gt;celery&lt;/h3&gt;

&lt;p&gt;Celery 是一款非常简单、灵活、可靠的分布式系统，可用于处理大量消息，并且提供了一整套操作此系统的一系列工具。&lt;/p&gt;

&lt;p&gt;Celery 是一款消息队列工具，可用于处理实时数据以及任务调度。&lt;/p&gt;

&lt;h3 id=&quot;rabbitmq&quot;&gt;rabbitmq&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;RabbitMQ&lt;/strong&gt;是实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件）。&lt;/p&gt;

&lt;p&gt;RabbitMQ服务器是用&lt;a href=&quot;https://baike.baidu.com/item/Erlang&quot;&gt;Erlang&lt;/a&gt;语言编写的，而集群和故障转移是构建在&lt;a href=&quot;https://baike.baidu.com/item/开放电信平台&quot;&gt;开放电信平台&lt;/a&gt;框架上的。所有主要的&lt;a href=&quot;https://baike.baidu.com/item/编程语言/9845131&quot;&gt;编程语言&lt;/a&gt;均有与代理接口通讯的&lt;a href=&quot;https://baike.baidu.com/item/客户端/101081&quot;&gt;客户端&lt;/a&gt;库。&lt;/p&gt;

&lt;h3 id=&quot;virtualenv&quot;&gt;virtualenv&lt;/h3&gt;

&lt;p&gt;VirtualEnv用于在一台机器上创建多个独立的python运行环境。VirtualEnvWrapper为前者提供了一些便利的命令行上的封装。&lt;/p&gt;

&lt;h2 id=&quot;run&quot;&gt;Run&lt;/h2&gt;

&lt;h3 id=&quot;using-virtualenv&quot;&gt;Using virtualenv&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;virtualenv dashboardenv &lt;span class=&quot;nt&quot;&gt;--python&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3.5
&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;dashboardenv/bin/activate
pip3 install &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; requirements.txt &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; https://pypi.tuna.tsinghua.edu.cn/simple
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;using-rabbitmq-with-celery&quot;&gt;Using rabbitmq with celery&lt;/h3&gt;

&lt;h4 id=&quot;install-rabbitmq&quot;&gt;install rabbitmq&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;提前安装erlang=23.0.3（https://blog.csdn.net/s_lisheng/article/details/79529113）&lt;/li&gt;
  &lt;li&gt;安装3.8.6的rabbitmq(https://blog.csdn.net/yanxilou/article/details/104467756/)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;configure-rabbitmq&quot;&gt;configure rabbitmq&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service rabbitmq-server     start
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rabbitmq-plugins &lt;span class=&quot;nb&quot;&gt;enable     &lt;/span&gt;rabbitmq_management
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rabbitmqctl add_user     username password
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rabbitmqctl     set_user_tags username administrator
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rabbitmqctl add_vhost     sysname
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rabbitmqctl     set_permissions &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; sysname username      &lt;span class=&quot;s2&quot;&gt;&quot;.*&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.*&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.*&quot;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;using-celery-in-django&quot;&gt;Using celery in django&lt;/h3&gt;

&lt;p&gt;在django项目中直接使用celery&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;__future__&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute_import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unicode_literals&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;celery&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Celery&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;kombu&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exchange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# set the default Django settings module for the &#39;celery&#39; program.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setdefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;DJANGO_SETTINGS_MODULE&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;dashboard.settings&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Celery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#39;dashboard&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;broker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;pyamqp://username:passsword@127.0.0.1/sysname&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;rpc://username:passsword@127.0.0.1/sysname&#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Note that any configuration that was previously set will be reset when config_from_object() is called.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# If you want to set additional configuration you should do so after.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config_from_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;django.conf:settings&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;CELERY_NODE&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# set queue&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;default_exchange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exchange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;default&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;topic&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_queues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;default&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_exchange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routing_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;default.#&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;crnodesys&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crnodesys_exchange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routing_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;period.#&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# set default queue and exchange&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CELERY_IGNORE_RESULT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CELERY_STORE_ERRORS_EVEN_IF_IGNORED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;task_default_queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;default&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;task_default_exchange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;default&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;task_default_exchange_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;topic&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;task_default_routing_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;default.task&#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# set routings&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_routes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;tasks.*&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;              &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;queue&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;period&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;routing_key&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;period.task&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;],)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Load task modules from all registered Django app configs.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autodiscover_tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;debug_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;Request: {0!r}&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;run-1&quot;&gt;Run&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;run django&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python ./manage.py runserver localhost:8000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;run celery&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;celery worker &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; dashboard &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; info
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 20 Nov 2020 12:51:40 +0800</pubDate>
        <link>http://2bebetter.github.io/gitlab/2020/11/20/django-celery-rabbitmq/</link>
        <guid isPermaLink="true">http://2bebetter.github.io/gitlab/2020/11/20/django-celery-rabbitmq/</guid>
        
        
        <category>gitlab</category>
        
      </item>
    
      <item>
        <title>软件定义网络中的网络资源分配与路由策略研究</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://cdmd.cnki.com.cn/Article/CDMD-10614-1020811261.htm&quot;&gt;软件定义网络中的网络资源分配与路由策略研究&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;软件定义网络中的网络资源分配与路由策略研究&quot;&gt;软件定义网络中的网络资源分配与路由策略研究&lt;/h2&gt;

&lt;h3 id=&quot;研究问题&quot;&gt;研究问题&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;表项资源分配：&lt;/strong&gt;受到当前交换机的空间和芯片制造工艺的限制，TCAM成为交换机中的一种受限资源，随之会带来数据平面的拓展性问题。因为软件定义网络中受限的表项资源所带来的数据平面拓展性问题，表项资源分配逐渐成为一个研究热点。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;流量工程：&lt;/strong&gt;给网络流量分级，当网络堵塞时保证优先级高的流量通过&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;文章针对特定场景下的链路故障恢复和路由规划，以及由于链路故障恢复场景中表项资源爆炸增长所导致的表项资源分配。&lt;/p&gt;

&lt;h3 id=&quot;解决方案&quot;&gt;解决方案&lt;/h3&gt;

&lt;h4 id=&quot;链路故障恢复中的规划模型&quot;&gt;链路故障恢复中的规划模型&lt;/h4&gt;

&lt;p&gt;混合整数线性规划-&amp;gt;近似启发式算法&lt;/p&gt;

&lt;p&gt;线性规划需要考虑的约束：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;网络约束
    &lt;ul&gt;
      &lt;li&gt;恢复后的链路应与断裂的路径不同&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;带宽约束&lt;/li&gt;
  &lt;li&gt;流约束&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;根据不同的链路恢复要求设定目标函数，例如网络流量吞吐最大化或者尽量降低网络中被中断的流。&lt;/p&gt;

&lt;p&gt;根据松弛线性规划式设计近似启发式算法。&lt;/p&gt;

&lt;h3 id=&quot;相关概念&quot;&gt;相关概念&lt;/h3&gt;

&lt;p&gt;网络故障恢复：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Restoration模式：资源不需要提前分配，当网络链路故障发生时，再进行网络资源规划与动态分配，但这种模式会带来额外的信令开销与故障恢复时延。&lt;/li&gt;
  &lt;li&gt;Protection模式：在网络故障发生之前就提前分配好网络资源，即中断网络流的恢复路径、交换机/路由器表项资源、带宽等。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 16 Nov 2020 10:21:40 +0800</pubDate>
        <link>http://2bebetter.github.io/thesis/2020/11/16/thesis-reading-02/</link>
        <guid isPermaLink="true">http://2bebetter.github.io/thesis/2020/11/16/thesis-reading-02/</guid>
        
        
        <category>thesis</category>
        
      </item>
    
  </channel>
</rss>
