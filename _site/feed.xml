<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2bebetter</title>
    <description>to be a better man
</description>
    <link>http://2bebetter.github.io/</link>
    <atom:link href="http://2bebetter.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 25 Nov 2020 21:30:36 +0800</pubDate>
    <lastBuildDate>Wed, 25 Nov 2020 21:30:36 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Software-Defifined Networking Approaches for Link Failure Recovery: A Survey</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#software-defifined-networking-approaches-for-link-failure-recovery-a-survey&quot; id=&quot;markdown-toc-software-defifined-networking-approaches-for-link-failure-recovery-a-survey&quot;&gt;Software-Defifined Networking Approaches for Link Failure Recovery: A Survey&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#链路故障检测机制&quot; id=&quot;markdown-toc-链路故障检测机制&quot;&gt;链路故障检测机制&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#链路故障恢复机制&quot; id=&quot;markdown-toc-链路故障恢复机制&quot;&gt;链路故障恢复机制&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#proactive&quot; id=&quot;markdown-toc-proactive&quot;&gt;Proactive&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#reactive&quot; id=&quot;markdown-toc-reactive&quot;&gt;Reactive&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#laege-scale-sdn&quot; id=&quot;markdown-toc-laege-scale-sdn&quot;&gt;Laege-scale SDN&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#hybrid-sdn&quot; id=&quot;markdown-toc-hybrid-sdn&quot;&gt;Hybrid SDN&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;software-defifined-networking-approaches-for-link-failure-recovery-a-survey&quot;&gt;Software-Defifined Networking Approaches for Link Failure Recovery: A Survey&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://ideas.repec.org/a/gam/jsusta/v12y2020i10p4255-d361650.html&quot;&gt;Software-Defifined Networking Approaches for Link Failure Recovery: A Survey&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SDN使用主动和被动两种主要方法来处理链路故障。&lt;/p&gt;

&lt;p&gt;在主动方法中，备用路径是预先配置的，并且在链路故障的情况下，中断的流将转发到备份路径，不需要与控制器进行交互。&lt;/p&gt;

&lt;p&gt;相反，在反应性方案中即被动方法中，需要与控制器联系以寻找替代路径，在控制器计算路径结束之后，重新下发新路径的流表规则。&lt;/p&gt;

&lt;p&gt;但是，这两种方案都有其优缺点，同时还要在性能和效率上进行权衡。&lt;/p&gt;

&lt;h3 id=&quot;链路故障检测机制&quot;&gt;链路故障检测机制&lt;/h3&gt;

&lt;p&gt;SDN中的故障恢复过程从检测到链路故障开始，如果检测迅速，那么整个恢复过程的总延迟将很小，这就是为什么检测方案对整个过程如此重要。&lt;/p&gt;

&lt;p&gt;下表概述了链路故障检测机制，故障链路的检测方法以及检测方案中的相关问题。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在[32，33]中提出的方案使用监视周期的概念来减少链路故障恢复时间。在参考文献[32]中，引入了二进制搜索技术以最小化路径上的跳数。&lt;/li&gt;
  &lt;li&gt;类似地，在参考文献[33,34]中，使用启发式方法[35]将监视分配公式化为邮递员问题，以分配监视周期。&lt;/li&gt;
  &lt;li&gt;OpenFlow使用了与以太网相同的检测信号的机制，通过在节点之间以固定的时间间隔交换心跳消息来确定网络的状态，通过节点之间的hello数据包的交换速率来检查活动性。因此，如果节点在16±8 ms的常规时间间隔内未收到hello数据包，则会向控制器通知发生故障的链路。&lt;/li&gt;
  &lt;li&gt;生成树协议（STP）[38]和反向生成树协议（RSTP）也已在数据链路层上用于链路故障检测。但是，它们的检测时间跨度为几秒钟，不能保证现代技术的延迟要求。&lt;/li&gt;
  &lt;li&gt;SDN社区[36,40,41]中也常规提供OpenFlow快速故障转移（FF）组[1]和双向转发检测（BFD）[39]，用于链路故障检测和恢复。&lt;/li&gt;
  &lt;li&gt;在[42]中提出了一种故障检测机制，称为低错误率故障检测服务（FDLM），它使用心跳消息将检测中的错误最小化。&lt;/li&gt;
  &lt;li&gt;使用多协议标签交换（MPLS）BFD来检测端到端路径中传输网络的故障。该方案通过与数据包一起发送探测消息，当连续的探测消息之间存在间隙时，认为检测到链路故障。&lt;/li&gt;
  &lt;li&gt;在[45]中提出了一种使用基于out 数据包的计数器机制的故障检测方法。对链接上安装的流规则进行标记和监视，然后在目标位置对数据包进行计数。&lt;/li&gt;
  &lt;li&gt;交换机级别的故障检测方案[47]被称为交换机故障检测（SFD），使用故障链路和网络拓扑作为输入。为了识别故障交换机，该算法首先找到故障链路的源和目的地。然后，发现与交换机连接的所有主机，并计算丢包率是否为100％。(&lt;strong&gt;仅限节点故障&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-25-thesis-reading-04/image-20201125192853820.png&quot; alt=&quot;image-20201125192853820&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;链路故障恢复机制&quot;&gt;链路故障恢复机制&lt;/h3&gt;

&lt;h4 id=&quot;proactive&quot;&gt;Proactive&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-25-thesis-reading-04/image-20201125202420813.png&quot; alt=&quot;image-20201125202420813&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;OpenFlow提供了Fast-FailOver用于故障检测和恢复。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;BFD&lt;/li&gt;
  &lt;li&gt;SPIDER&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;reactive&quot;&gt;Reactive&lt;/h4&gt;

&lt;p&gt;响应式故障恢复主要依靠SDN控制器。&lt;/p&gt;

&lt;p&gt;这种方法的反对者声称反应式方案不能满足CGN的延迟范围，即50毫秒。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-25-thesis-reading-04/image-20201125210823088.png&quot; alt=&quot;image-20201125210823088&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;laege-scale-sdn&quot;&gt;Laege-scale SDN&lt;/h4&gt;

&lt;p&gt;利用图论对网络进行裁剪。&lt;/p&gt;

&lt;p&gt;Distributed controller clustering in software defifined networks.&lt;/p&gt;

&lt;h4 id=&quot;hybrid-sdn&quot;&gt;Hybrid SDN&lt;/h4&gt;

</description>
        <pubDate>Wed, 25 Nov 2020 11:21:40 +0800</pubDate>
        <link>http://2bebetter.github.io/thesis/2020/11/25/thesis-reading-04/</link>
        <guid isPermaLink="true">http://2bebetter.github.io/thesis/2020/11/25/thesis-reading-04/</guid>
        
        
        <category>thesis</category>
        
      </item>
    
      <item>
        <title>self learning</title>
        <description>&lt;p&gt;我是2019年入学，现在已经是研究生的第二年了，现在正面临着无法毕业、无法找到工作的巨大压力。我是因为喜欢网络安全方向才选择了目前这个学校和专业，但是入学之后才发现能从学校中学习到的毕竟还是很少很少一部分，所以为了之后的招聘(竟然不到一年了orz)准备自学。&lt;/p&gt;

&lt;p&gt;我目前所研究的流域是SDN，所以对网络协议有一定的了解，但是恐怕无法找到一个合适的工作，我暂时也没有继续深入研究下去的打算，所以希望自学的方向是网络攻防方向。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-25-self-learning/145189195f4fef3c96999d5adfc6e1a0_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-25-self-learning/v2-62472b01b9ca7a58e390031bfcc5fd8b_1440w.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Nov 2020 10:21:40 +0800</pubDate>
        <link>http://2bebetter.github.io/thesis/2020/11/25/self-learning/</link>
        <guid isPermaLink="true">http://2bebetter.github.io/thesis/2020/11/25/self-learning/</guid>
        
        
        <category>thesis</category>
        
      </item>
    
      <item>
        <title>Rapid Restoration Techniques for Software-Defined Networks</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#enhanced-optimal-placements-of-multi-controllers-in-sdn&quot; id=&quot;markdown-toc-enhanced-optimal-placements-of-multi-controllers-in-sdn&quot;&gt;Enhanced optimal placements of multi-controllers in SDN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#rapid-restoration-techniques-for-software-defined-networks&quot; id=&quot;markdown-toc-rapid-restoration-techniques-for-software-defined-networks&quot;&gt;Rapid Restoration Techniques for Software-Defined Networks&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#problem&quot; id=&quot;markdown-toc-problem&quot;&gt;Problem&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#proposal-methods&quot; id=&quot;markdown-toc-proposal-methods&quot;&gt;Proposal Methods&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#path-recover&quot; id=&quot;markdown-toc-path-recover&quot;&gt;Path recover&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#methods&quot; id=&quot;markdown-toc-methods&quot;&gt;Methods&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#experiment&quot; id=&quot;markdown-toc-experiment&quot;&gt;Experiment&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://link.springer.com/article/10.1007/s12652-020-02554-2&quot;&gt;Enhanced optimal placements of multi-controllers in SDN&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;enhanced-optimal-placements-of-multi-controllers-in-sdn&quot;&gt;Enhanced optimal placements of multi-controllers in SDN&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.mdpi.com/2076-3417/10/10/3411&quot;&gt;Rapid Restoration Techniques for Software-Defined Networks&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;rapid-restoration-techniques-for-software-defined-networks&quot;&gt;Rapid Restoration Techniques for Software-Defined Networks&lt;/h2&gt;

&lt;h3 id=&quot;problem&quot;&gt;Problem&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;网络元素容易发生故障，从故障中恢复既可以主动实现（也称为保护），也可以被动地实现（也称为恢复）。在保护方面，替代解决方案是在发生故障之前预先计划和保留的。但是在恢复中，解决方案不是预先计划的，当发生故障时需要动态按需计算。&lt;/li&gt;
  &lt;li&gt;保护机制很昂贵，而且备份路径可能比主路径更快失效&lt;/li&gt;
  &lt;li&gt;恢复机制很耗时：（1）计算新路径的时间 （2）更新新路径上的交换机的时间&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;proposal-methods&quot;&gt;Proposal Methods&lt;/h3&gt;

&lt;h4 id=&quot;path-recover&quot;&gt;Path recover&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;网络模型&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;无向图&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Community Detection(CD)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CD可以将具有共同属性的节点组表示为社区。在这里，每个社区被定义为一个子图，其中的节点密集连接，但与网络的其余部分稀疏连接。&lt;/p&gt;

&lt;p&gt;目前已经提出的算法：Louvain算法    Girvan     Newman算法&lt;/p&gt;

&lt;p&gt;通过将网络图G划分为N个社区，我们假设当发生链路故障事件时，只有一个社区会遭受该特定故障。在大部分链路故障情况下，这种假设是合理的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CD模型&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;社区检测算法提取的社区数量取决于网络拓扑结构和社区检测算法的参数化。&lt;/p&gt;

&lt;p&gt;假设路径上连续的路由器必定位于同一社区中。根据Dijkstra算法计算节点之间的最短路径：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P_{Dset} = {P | ∀ r_1,r_d ∈ V : P = D(P_{1,r_d} )}&lt;/script&gt;

&lt;p&gt;其中$P_{r_1，r_d}$表示任意两个特定节点之间的所有可能路径的集合。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-24-thesis-reading-04/image-20201124190517565.png&quot; alt=&quot;示例&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Path Anatomy-Based Approach&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;控制器首先在受影响的路径上的交换机中删除旧流表条目，然后为备用路径下发所需的规则。当受影响路径的长度较长时，此过程很耗时。网络路径解剖（PA）是此问题的潜在解决方案。&lt;/p&gt;

&lt;p&gt;相邻路由器的此序列具有一些中间路由器，称为$r_m$，路径P可被分为两段：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-24-thesis-reading-04/image-20201124192229346.png&quot; alt=&quot;image-20201124192229346&quot; /&gt;&lt;/p&gt;

&lt;p&gt;找到从$r_1$到$r_d$的新路径以克服故障并不是有效的解决方案，因为规则替换和更新的成本可能很高。&lt;/p&gt;

&lt;p&gt;基于PA可以实现两种方法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第一个使用P的中间路由器来考虑两个部分（即子路径），其中一个正在运行，而另一个没有运行（譬如由于故障）。这意味着受影响路径的一个分段仍可以按原样使用，并且更新该分段的操作成本为零。&lt;/li&gt;
  &lt;li&gt;在第二种方案中，并不使用新的子路径替换路径的故障段，而是将备用路径的搜索空间减少到仅在围绕故障链路的两个节点之间。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;methods&quot;&gt;Methods&lt;/h3&gt;

&lt;p&gt;四个组件：&lt;em&gt;SDN Controller&lt;/em&gt; 、&lt;em&gt;Topology Parser&lt;/em&gt; 、&lt;em&gt;Global Recovery Scheme&lt;/em&gt; 、&lt;em&gt;Community Detection&lt;/em&gt;、&lt;em&gt;Path Anatomy&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;使用Girvan和Newman将网络拓扑图G的虚拟分区创建为C。&lt;/p&gt;

&lt;p&gt;根据Dijkstra算法开发了两种算法来满足所有的路径查找需求：&lt;/p&gt;

&lt;p&gt;（1）新数据包到达需要计算新路径&lt;/p&gt;

&lt;p&gt;（2）路由故障需要计算新路径&lt;/p&gt;

&lt;h3 id=&quot;experiment&quot;&gt;Experiment&lt;/h3&gt;

&lt;p&gt;三个评估指标：length、operation、latency。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;length表示表示在链路发生故障时与恢复解决方案时找到的新路径相关的跃点数。&lt;/li&gt;
  &lt;li&gt;operation包括添加，删除和修改流条目。&lt;/li&gt;
  &lt;li&gt;latency表示安装备用路径所需的时间。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为了评估不同的恢复算法，使用了三种实际的网络拓扑结构-网络存储库中的ERnet ，German50和NR。论文使用Internet拓扑生成器Brite [39]来生成其他拓扑，
利用Waxman算法基于Brite生成随机图。&lt;/p&gt;

&lt;p&gt;使用Mininet仿真作为实验环境。&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Nov 2020 10:21:40 +0800</pubDate>
        <link>http://2bebetter.github.io/thesis/2020/11/24/thesis-reading-04/</link>
        <guid isPermaLink="true">http://2bebetter.github.io/thesis/2020/11/24/thesis-reading-04/</guid>
        
        
        <category>thesis</category>
        
      </item>
    
      <item>
        <title>Controller placements for latency minimization of both primary and backup paths in SDNs</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#controller-placements-for-latency-minimization-of-both-primary-and-backup-paths-in-sdns&quot; id=&quot;markdown-toc-controller-placements-for-latency-minimization-of-both-primary-and-backup-paths-in-sdns&quot;&gt;Controller placements for latency minimization of both primary and backup paths in SDNs&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#problem&quot; id=&quot;markdown-toc-problem&quot;&gt;Problem&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#methods&quot; id=&quot;markdown-toc-methods&quot;&gt;Methods&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#流程&quot; id=&quot;markdown-toc-流程&quot;&gt;流程&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#experiment&quot; id=&quot;markdown-toc-experiment&quot;&gt;Experiment&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#limits&quot; id=&quot;markdown-toc-limits&quot;&gt;Limits&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sciencedirect.com/science/article/pii/S0140366420319150&quot;&gt;Controller placements for latency minimization of both primary and backup paths in SDNs&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;controller-placements-for-latency-minimization-of-both-primary-and-backup-paths-in-sdns&quot;&gt;Controller placements for latency minimization of both primary and backup paths in SDNs&lt;/h2&gt;

&lt;h3 id=&quot;problem&quot;&gt;Problem&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;主路径延迟和备用路径延迟的两个目标本质上是冲突的。假设网络是理想的，则倾向于将控制器放置在靠近交换机的位置，以减少主要路径上交换机到控制器之间的延迟。但是，由于发生链接故障时绕行路径较长，因此备用路径延迟可能会很高。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;methods&quot;&gt;Methods&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;提出了一种新颖的多目标SDN控制器放置问题，以在没有链路故障和同时发生单链路故障的情况下将切换到控制器的通信延迟降到最低。&lt;/li&gt;
  &lt;li&gt;提出了一种有效的基于元启发式的可靠性感知和面向延迟的控制器放置算法（RALO），用于多目标多控制器放置。该算法通过具有网络分区的贪婪方法构造初始可行解，然后通过可变邻域搜索重复编辑生成新解。同时，为了避免陷入局部最优，该算法对当前解执行微扰和破坏操作。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;根据各种限制条件抽象成数学表达式，包含约束条件和目标函数，之后为该NP问题提出一个算法解。通过将网络节点划分为多个交换机子集并根据交换机到控制器的通信延迟和控制器处理能力在每个交换机子集中分配一个控制器来构造一个初始可行的解决方案，之后使用可变邻域搜索(VNS)生成新的解决方案，检验该方案是否是可行解，并更新不符合条件的方案。&lt;/p&gt;

&lt;h3 id=&quot;流程&quot;&gt;流程&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph TD;
	Initial_solution_construction -- searches the neighborhood to generate new feasible solutions --&amp;gt; Variable_neighborhood_search;

	Variable_neighborhood_search -- Perturbation reassigns some of the switches to other controllers for each node subset --&amp;gt; Perturbation;
	
	Perturbation -- Controller relocation attempts to increase the performance of &amp;lt;br&amp;gt; the feasible solutions by moving a controller to a different position &amp;lt;br&amp;gt; in the same node subset --&amp;gt;  Controller_relocation;
	
	 Controller_relocation-- Shake destroys the current solution significantly &amp;lt;br&amp;gt; so that the solution can jump to a solution space far away. &amp;lt;br&amp;gt; Shake attempts to find better controllers for the nodes with the &amp;lt;br&amp;gt; largest node-to-controller communication delay in each subset. --&amp;gt; Shake;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;算法的初始可行解决方案的构建流程：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;构造分为两个步骤：节点子集划分和控制器在每个节点子集中的放置。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;算法1继续在参数𝑟𝑚𝑎𝑥确定的最大迭代次数内迭代找到新解。在每次迭代期间，扰动控制器和开关之间的映射关系，并执行变量邻域搜索，然后改变控制器的位置。&lt;/li&gt;
  &lt;li&gt;如果当前解比所有找到的Pareto最优解差，则当前解决方案会受到Shakes的极大干扰，因此该解可以跳到另一个解空间以避免陷入局部最优。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-23-thesis-reading-03/image-20201123174210356.png&quot; alt=&quot;image-20201123174210356&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;每次找到潜在的控制器位置后，算法2会更新所有节点的𝐿𝑖，然后选择具有最大𝐿𝑖的节点作为下一个潜在的控制器位置；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-23-thesis-reading-03/image-20201123192701939.png&quot; alt=&quot;image-20201123192701939&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;算法3在算法2获得的每个节点子集中选择每个控制器的位置，并在约束条件下将每个节点映射到控制器。在算法3中，将两跳中的节点当中具有最大请求数的那个节点选为每个子集中的控制器位置。该算法按请求数量的非升序对每个子集𝑆𝑘中的所有其他节点进行排序，并在控制器的约束下将每个节点分配给控制器。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-23-thesis-reading-03/image-20201123193640292.png&quot; alt=&quot;image-20201123193640292&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;experiment&quot;&gt;Experiment&lt;/h3&gt;

&lt;p&gt;在仿真中使用的网络拓扑是Internet拓扑zoo中的8种实际网络拓扑，以及由斯坦福网络分析平台（SNAP）生成的两种网络拓扑（生成网络I和生成网络II）。生成网络I是符合ER（Erdos-Renyi）随机模型的一组网络拓扑，而生成网络II是符合小世界模型的一组网络拓扑。每种生成网络均包含10种网络拓扑。&lt;/p&gt;

&lt;p&gt;文章共比较了LARC、RALO、PSA、Survivor和OPT共五种算法在主要路径和备份路径上的平均延时和累计延时，以及运行时间等评估指标上的差异。&lt;/p&gt;

&lt;h3 id=&quot;limits&quot;&gt;Limits&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;假设网络中最多存在一个链路故障，因为网络中多链路故障的可能性很小。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 23 Nov 2020 10:21:40 +0800</pubDate>
        <link>http://2bebetter.github.io/thesis/2020/11/23/thesis-reading-03/</link>
        <guid isPermaLink="true">http://2bebetter.github.io/thesis/2020/11/23/thesis-reading-03/</guid>
        
        
        <category>thesis</category>
        
      </item>
    
      <item>
        <title>在Django项目中使用Celery+Rabbitmq</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#background&quot; id=&quot;markdown-toc-background&quot;&gt;background&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#celery&quot; id=&quot;markdown-toc-celery&quot;&gt;celery&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#rabbitmq&quot; id=&quot;markdown-toc-rabbitmq&quot;&gt;rabbitmq&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#virtualenv&quot; id=&quot;markdown-toc-virtualenv&quot;&gt;virtualenv&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#run&quot; id=&quot;markdown-toc-run&quot;&gt;Run&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#using-virtualenv&quot; id=&quot;markdown-toc-using-virtualenv&quot;&gt;Using virtualenv&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#using-rabbitmq-with-celery&quot; id=&quot;markdown-toc-using-rabbitmq-with-celery&quot;&gt;Using rabbitmq with celery&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#install-rabbitmq&quot; id=&quot;markdown-toc-install-rabbitmq&quot;&gt;install rabbitmq&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#configure-rabbitmq&quot; id=&quot;markdown-toc-configure-rabbitmq&quot;&gt;configure rabbitmq&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#using-celery-in-django&quot; id=&quot;markdown-toc-using-celery-in-django&quot;&gt;Using celery in django&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#run-1&quot; id=&quot;markdown-toc-run-1&quot;&gt;Run&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在Django项目中使用celery+rabbitmq。&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;background&lt;/h2&gt;

&lt;h3 id=&quot;celery&quot;&gt;celery&lt;/h3&gt;

&lt;p&gt;Celery 是一款非常简单、灵活、可靠的分布式系统，可用于处理大量消息，并且提供了一整套操作此系统的一系列工具。&lt;/p&gt;

&lt;p&gt;Celery 是一款消息队列工具，可用于处理实时数据以及任务调度。&lt;/p&gt;

&lt;h3 id=&quot;rabbitmq&quot;&gt;rabbitmq&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;RabbitMQ&lt;/strong&gt;是实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件）。&lt;/p&gt;

&lt;p&gt;RabbitMQ服务器是用&lt;a href=&quot;https://baike.baidu.com/item/Erlang&quot;&gt;Erlang&lt;/a&gt;语言编写的，而集群和故障转移是构建在&lt;a href=&quot;https://baike.baidu.com/item/开放电信平台&quot;&gt;开放电信平台&lt;/a&gt;框架上的。所有主要的&lt;a href=&quot;https://baike.baidu.com/item/编程语言/9845131&quot;&gt;编程语言&lt;/a&gt;均有与代理接口通讯的&lt;a href=&quot;https://baike.baidu.com/item/客户端/101081&quot;&gt;客户端&lt;/a&gt;库。&lt;/p&gt;

&lt;h3 id=&quot;virtualenv&quot;&gt;virtualenv&lt;/h3&gt;

&lt;p&gt;VirtualEnv用于在一台机器上创建多个独立的python运行环境。VirtualEnvWrapper为前者提供了一些便利的命令行上的封装。&lt;/p&gt;

&lt;h2 id=&quot;run&quot;&gt;Run&lt;/h2&gt;

&lt;h3 id=&quot;using-virtualenv&quot;&gt;Using virtualenv&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;virtualenv dashboardenv &lt;span class=&quot;nt&quot;&gt;--python&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3.5
&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;dashboardenv/bin/activate
pip3 install &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; requirements.txt &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; https://pypi.tuna.tsinghua.edu.cn/simple
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;using-rabbitmq-with-celery&quot;&gt;Using rabbitmq with celery&lt;/h3&gt;

&lt;h4 id=&quot;install-rabbitmq&quot;&gt;install rabbitmq&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;提前安装erlang=23.0.3（https://blog.csdn.net/s_lisheng/article/details/79529113）&lt;/li&gt;
  &lt;li&gt;安装3.8.6的rabbitmq(https://blog.csdn.net/yanxilou/article/details/104467756/)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;configure-rabbitmq&quot;&gt;configure rabbitmq&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service rabbitmq-server     start
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rabbitmq-plugins &lt;span class=&quot;nb&quot;&gt;enable     &lt;/span&gt;rabbitmq_management
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rabbitmqctl add_user     username password
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rabbitmqctl     set_user_tags username administrator
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rabbitmqctl add_vhost     sysname
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rabbitmqctl     set_permissions &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; sysname username      &lt;span class=&quot;s2&quot;&gt;&quot;.*&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.*&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.*&quot;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;using-celery-in-django&quot;&gt;Using celery in django&lt;/h3&gt;

&lt;p&gt;在django项目中直接使用celery&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;__future__&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absolute_import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unicode_literals&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;celery&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Celery&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;kombu&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exchange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# set the default Django settings module for the &#39;celery&#39; program.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setdefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;DJANGO_SETTINGS_MODULE&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;dashboard.settings&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Celery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&#39;dashboard&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;broker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;pyamqp://username:passsword@127.0.0.1/sysname&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;rpc://username:passsword@127.0.0.1/sysname&#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Note that any configuration that was previously set will be reset when config_from_object() is called.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# If you want to set additional configuration you should do so after.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config_from_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;django.conf:settings&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;CELERY_NODE&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# set queue&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;default_exchange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exchange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;default&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;topic&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_queues&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;default&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default_exchange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routing_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;default.#&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;crnodesys&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crnodesys_exchange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routing_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;period.#&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# set default queue and exchange&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CELERY_IGNORE_RESULT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CELERY_STORE_ERRORS_EVEN_IF_IGNORED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;task_default_queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;default&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;task_default_exchange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;default&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;task_default_exchange_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;topic&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;task_default_routing_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;default.task&#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# set routings&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_routes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;tasks.*&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;              &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;queue&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;period&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;routing_key&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;period.task&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;],)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Load task modules from all registered Django app configs.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autodiscover_tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@app.task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;debug_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;Request: {0!r}&#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;run-1&quot;&gt;Run&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;run django&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python ./manage.py runserver localhost:8000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;run celery&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;celery worker &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; dashboard &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; info
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 20 Nov 2020 12:51:40 +0800</pubDate>
        <link>http://2bebetter.github.io/gitlab/2020/11/20/django-celery-rabbitmq/</link>
        <guid isPermaLink="true">http://2bebetter.github.io/gitlab/2020/11/20/django-celery-rabbitmq/</guid>
        
        
        <category>gitlab</category>
        
      </item>
    
      <item>
        <title>软件定义网络中的网络资源分配与路由策略研究</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://cdmd.cnki.com.cn/Article/CDMD-10614-1020811261.htm&quot;&gt;软件定义网络中的网络资源分配与路由策略研究&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;软件定义网络中的网络资源分配与路由策略研究&quot;&gt;软件定义网络中的网络资源分配与路由策略研究&lt;/h2&gt;

&lt;h3 id=&quot;研究问题&quot;&gt;研究问题&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;表项资源分配：&lt;/strong&gt;受到当前交换机的空间和芯片制造工艺的限制，TCAM成为交换机中的一种受限资源，随之会带来数据平面的拓展性问题。因为软件定义网络中受限的表项资源所带来的数据平面拓展性问题，表项资源分配逐渐成为一个研究热点。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;流量工程：&lt;/strong&gt;给网络流量分级，当网络堵塞时保证优先级高的流量通过&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;文章针对特定场景下的链路故障恢复和路由规划，以及由于链路故障恢复场景中表项资源爆炸增长所导致的表项资源分配。&lt;/p&gt;

&lt;h3 id=&quot;解决方案&quot;&gt;解决方案&lt;/h3&gt;

&lt;h4 id=&quot;链路故障恢复中的规划模型&quot;&gt;链路故障恢复中的规划模型&lt;/h4&gt;

&lt;p&gt;混合整数线性规划-&amp;gt;近似启发式算法&lt;/p&gt;

&lt;p&gt;线性规划需要考虑的约束：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;网络约束
    &lt;ul&gt;
      &lt;li&gt;恢复后的链路应与断裂的路径不同&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;带宽约束&lt;/li&gt;
  &lt;li&gt;流约束&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;根据不同的链路恢复要求设定目标函数，例如网络流量吞吐最大化或者尽量降低网络中被中断的流。&lt;/p&gt;

&lt;p&gt;根据松弛线性规划式设计近似启发式算法。&lt;/p&gt;

&lt;h3 id=&quot;相关概念&quot;&gt;相关概念&lt;/h3&gt;

&lt;p&gt;网络故障恢复：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Restoration模式：资源不需要提前分配，当网络链路故障发生时，再进行网络资源规划与动态分配，但这种模式会带来额外的信令开销与故障恢复时延。&lt;/li&gt;
  &lt;li&gt;Protection模式：在网络故障发生之前就提前分配好网络资源，即中断网络流的恢复路径、交换机/路由器表项资源、带宽等。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 16 Nov 2020 10:21:40 +0800</pubDate>
        <link>http://2bebetter.github.io/thesis/2020/11/16/thesis-reading-02/</link>
        <guid isPermaLink="true">http://2bebetter.github.io/thesis/2020/11/16/thesis-reading-02/</guid>
        
        
        <category>thesis</category>
        
      </item>
    
      <item>
        <title>修正版Gitlab CI/CD配置</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#概览&quot; id=&quot;markdown-toc-概览&quot;&gt;概览&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#架构图&quot; id=&quot;markdown-toc-架构图&quot;&gt;架构图&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#部署环境&quot; id=&quot;markdown-toc-部署环境&quot;&gt;部署环境&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#账号和ip&quot; id=&quot;markdown-toc-账号和ip&quot;&gt;账号和IP&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#gitlab-runner-repo&quot; id=&quot;markdown-toc-gitlab-runner-repo&quot;&gt;gitlab-runner&amp;lt;-&amp;gt;repo&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#install-gitlab-runner&quot; id=&quot;markdown-toc-install-gitlab-runner&quot;&gt;install gitlab-runner&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#install-from-apt&quot; id=&quot;markdown-toc-install-from-apt&quot;&gt;install from apt&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#install-from-docker&quot; id=&quot;markdown-toc-install-from-docker&quot;&gt;install from docker&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#setup-gitlab-runner&quot; id=&quot;markdown-toc-setup-gitlab-runner&quot;&gt;setup gitlab-runner&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#register-gitlab-runner&quot; id=&quot;markdown-toc-register-gitlab-runner&quot;&gt;register gitlab-runner&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#run-gitlab-runner&quot; id=&quot;markdown-toc-run-gitlab-runner&quot;&gt;run gitlab-runner&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#自定义docker-镜像&quot; id=&quot;markdown-toc-自定义docker-镜像&quot;&gt;自定义docker 镜像&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#dockerfile&quot; id=&quot;markdown-toc-dockerfile&quot;&gt;Dockerfile&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#docker-commit&quot; id=&quot;markdown-toc-docker-commit&quot;&gt;docker commit&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#runner变量&quot; id=&quot;markdown-toc-runner变量&quot;&gt;runner变量&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#gitlab-runner---production_env&quot; id=&quot;markdown-toc-gitlab-runner---production_env&quot;&gt;gitlab-runner &amp;lt;-&amp;gt; production_env&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#ansible&quot; id=&quot;markdown-toc-ansible&quot;&gt;ansible&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ansible-playbook&quot; id=&quot;markdown-toc-ansible-playbook&quot;&gt;ansible-playbook&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#key-pair&quot; id=&quot;markdown-toc-key-pair&quot;&gt;key pair&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#配置生产环境&quot; id=&quot;markdown-toc-配置生产环境&quot;&gt;配置生产环境&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#production_env---repo&quot; id=&quot;markdown-toc-production_env---repo&quot;&gt;production_env -&amp;gt; repo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#trouble-shooting&quot; id=&quot;markdown-toc-trouble-shooting&quot;&gt;Trouble shooting&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#docker-is-not-active&quot; id=&quot;markdown-toc-docker-is-not-active&quot;&gt;docker is not active&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#docker-pull-error&quot; id=&quot;markdown-toc-docker-pull-error&quot;&gt;docker pull error&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#本地调试&quot; id=&quot;markdown-toc-本地调试&quot;&gt;本地调试&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cd导致的权限问题&quot; id=&quot;markdown-toc-cd导致的权限问题&quot;&gt;cd导致的权限问题&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;cyberrange项目cr-vroute子系统gitlab CI/CD配置说明。&lt;/p&gt;

&lt;h2 id=&quot;概览&quot;&gt;概览&lt;/h2&gt;

&lt;h3 id=&quot;架构图&quot;&gt;架构图&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph LR;
	Repo-- clone repo, by gitlab internal --&amp;gt; gitlab_runner;

	gitlab_runner-- clone repo, private ssh key by manual configure --&amp;gt; vm01;
	
	gitlab_runner-- clone repo, private ssh key by manual configure --&amp;gt; vm02;
	
	gitlab_runner-- clone repo, private ssh key by manual configure --&amp;gt; vm03;
	
	gitlab_runner-- clone repo, private ssh key by manual configure --&amp;gt; vm04;
	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;图示解释：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;gitlab runner从repo下拉代码。进行构建，测试等操作，其权限来自与runner配置时使用的token，不需要额外配置，只要正常注册了gitlab runner就可以，由gitlab帮我们搞定；&lt;/li&gt;
  &lt;li&gt;gitlab runner通过sshkey 来访问production_env进行部署代码。需要登录到production_env，使用的ssh private key，需要提前手动设置，生成ssh key pair，将private key保存到gitlab CI/CD设置的secret变量中，public key通过ssh-copy-id上传到production_env；&lt;/li&gt;
  &lt;li&gt;production_env访问repo下拉代码。需要提前手动配置ssh key，这不仅是为了部署时使用，紧急需要时，可以登录production_env手动下拉代码。ssh key配置和用户在gitlab或者github上传ssh key是一样的。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;关于为什么要单独设置gitlab-runner：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;便于项目的迁移，只需要调整少部分runner的设置即可以重新复现整个项目。&lt;/li&gt;
  &lt;li&gt;对于一些企业和公司，runner大多是作为单独的服务被出租的，也就意味着开发者只能接触到自己的开发环境，而不需要关心runner和git之间的互动，减少开发的工作量。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;但是这样同样也会带来一些不便利的地方，例如在添加生产环境之前需要单独配置生产服务器所需的环境。&lt;/p&gt;

&lt;h3 id=&quot;部署环境&quot;&gt;部署环境&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;gitlab-runner&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;环境&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;操作系统&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;ubuntu&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;3.5&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;image:&lt;br /&gt;   gitlab-runner:lastest&lt;br /&gt;   localhost:5000/&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;production_env&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;环境&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;操作系统&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;ubuntu 14.04.5 LTS&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;s&lt;/td&gt;
          &lt;td&gt;3.5&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;virtualenv&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt; &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;openvswitch-switch&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;2.0.2&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;账号和ip&quot;&gt;账号和IP&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;gitlab-runner&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;环境&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;10.10.20.3&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ACCOUNT&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;ubuntu&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;production_env&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;环境&lt;/th&gt;
          &lt;th&gt;描述&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;192.168.120.11-14&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ACCOUNT&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;ubuntu&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;PASSWD&lt;/td&gt;
          &lt;td&gt;crnetworksys&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;gitlab-runner-repo&quot;&gt;gitlab-runner&amp;lt;-&amp;gt;repo&lt;/h2&gt;

&lt;h3 id=&quot;install-gitlab-runner&quot;&gt;install gitlab-runner&lt;/h3&gt;

&lt;h4 id=&quot;install-from-apt&quot;&gt;install from apt&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash
apt-get install gitlab-runner
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;install-from-docker&quot;&gt;install from docker&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;修改apt的源：&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Update the &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt; package index and install packages to allow &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt; to use a repository over HTTPS:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;su
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; update
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; upgrade
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; install &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    apt-transport-https &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    ca-certificates &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    curl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    gnupg-agent &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    software-properties-common
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Add Docker’s official GPG key:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-key add -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Verify that you now have the key with the fingerprint&lt;code class=&quot;highlighter-rouge&quot;&gt;9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88&lt;/code&gt;, by searching for the last 8 characters of the fingerprint.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-key fingerprint 0EBFCD88
/etc/apt/trusted.gpg
&lt;span class=&quot;nt&quot;&gt;--------------------&lt;/span&gt;
pub   1024D/437D05B5 2004-09-12
      Key fingerprint &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 6302 39CC 130E 1A7F D81A  27B1 4097 6EAF 437D 05B5
uid                  Ubuntu Archive Automatic Signing Key &amp;lt;ftpmaster@ubuntu.com&amp;gt;
sub   2048g/79164387 2004-09-12

pub   1024D/FBB75451 2004-12-30
      Key fingerprint &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; C598 6B4F 1257 FFA8 6632  CBA7 4618 1433 FBB7 5451
uid                  Ubuntu CD Image Automatic Signing Key &amp;lt;cdimage@ubuntu.com&amp;gt;

pub   4096R/C0B21F32 2012-05-11
      Key fingerprint &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 790B C727 7767 219C 42C8  6F93 3B4F E6AC C0B2 1F32
uid                  Ubuntu Archive Automatic Signing Key &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2012&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;lt;ftpmaster@ubuntu.com&amp;gt;

pub   4096R/EFE21092 2012-05-11
      Key fingerprint &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 8439 38DF 228D 22F7 B374  2BC0 D94A A3F0 EFE2 1092
uid                  Ubuntu CD Image Automatic Signing Key &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2012&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;lt;cdimage@ubuntu.com&amp;gt;

pub   4096R/0EBFCD88 2017-02-22
      Key fingerprint &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88
uid                  Docker Release &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;CE deb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;lt;docker@docker.com&amp;gt;
sub   4096R/F273FCD8 2017-02-22
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Use the following command to set up the &lt;strong&gt;stable&lt;/strong&gt; repository. To add the &lt;strong&gt;nightly&lt;/strong&gt; or &lt;strong&gt;test&lt;/strong&gt; repository, add the word &lt;code class=&quot;highlighter-rouge&quot;&gt;nightly&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; (or both) after the word &lt;code class=&quot;highlighter-rouge&quot;&gt;stable&lt;/code&gt; in the commands below. &lt;a href=&quot;https://docs.docker.com/engine/install/&quot;&gt;Learn about &lt;strong&gt;nightly&lt;/strong&gt; and &lt;strong&gt;test&lt;/strong&gt; channels&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;add-apt-repository &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;s2&quot;&gt;&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;lsb_release &lt;span class=&quot;nt&quot;&gt;-cs&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
   stable&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在尝试了几次之后发现这一步骤对ubuntu14.04.6并不适用，将源更换为阿里源后成功&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;add-apt-repository &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;s2&quot;&gt;&quot;deb [arch=amd64]  
   http://mirrors.aliyun.com/docker-ce/linux/ubuntu &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;lsb_release &lt;span class=&quot;nt&quot;&gt;-cs&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
   stable&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;install docker engine&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; update
 &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; install docker-ce
 &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;service docker start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;setup-gitlab-runner&quot;&gt;setup gitlab-runner&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# pull image&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker pull gitlab/gitlab-runner
Using default tag: latest
latest: Pulling from gitlab/gitlab-runner
d72e567cc804: Pull &lt;span class=&quot;nb&quot;&gt;complete
&lt;/span&gt;0f3630e5ff08: Pull &lt;span class=&quot;nb&quot;&gt;complete
&lt;/span&gt;b6a83d81d1f4: Pull &lt;span class=&quot;nb&quot;&gt;complete
&lt;/span&gt;795a1e0f662d: Pull &lt;span class=&quot;nb&quot;&gt;complete
&lt;/span&gt;e26343354a23: Pull &lt;span class=&quot;nb&quot;&gt;complete
&lt;/span&gt;df2906232f5a: Pull &lt;span class=&quot;nb&quot;&gt;complete
&lt;/span&gt;e9423d1eea92: Pull &lt;span class=&quot;nb&quot;&gt;complete
&lt;/span&gt;45a5486ea8e3: Pull &lt;span class=&quot;nb&quot;&gt;complete
&lt;/span&gt;Digest: sha256:07d7c6d82b11646aa048427fadd9a1c0e5faa1efcea7e06689eadcf9b52da006
Status: Downloaded newer image &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;gitlab/gitlab-runner:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;register-gitlab-runner&quot;&gt;register gitlab-runner&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;register gitlab-runner using docker&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考：&lt;a href=&quot;https://docs.gitlab.com/runner/register/index.html#docker&quot;&gt;configure gitlab-runner&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--add-host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gitlab.cr.net:192.168.102.25&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register
Runtime platform                                    &lt;span class=&quot;nv&quot;&gt;arch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;amd64 &lt;span class=&quot;nv&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;linux &lt;span class=&quot;nv&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;6 &lt;span class=&quot;nv&quot;&gt;revision&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fa86510e &lt;span class=&quot;nv&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;11.9.2
Running &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;system-mode.                            
                                                   
Please enter the gitlab-ci coordinator URL &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;e.g. https://gitlab.com/&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
http://gitlab.cr.net/
Please enter the gitlab-ci token &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;this runner:
&lt;span class=&quot;nv&quot;&gt;$PROJECT_REGISTRATION_TOKEN&lt;/span&gt;
Please enter the gitlab-ci description &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;this runner:
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;a902a1cd5b80]: django-test
Please enter the gitlab-ci tags &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;this runner &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;comma separated&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
django, &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;或者使用命令行注册&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ PROJECT_REGISTRATION_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MbagsxLmj9pYugNaiQdL&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--add-host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gitlab.cr.net:192.168.102.25&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--non-interactive&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--executor&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;docker&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--docker-image&lt;/span&gt; python:3.4 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--url&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://gitlab.cr.net/&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--registration-token&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PROJECT_REGISTRATION_TOKEN&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--description&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vm-04&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--tag-list&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;crvroute&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--run-untagged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--locked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--docker-tlsverify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--docker-extra-hosts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gitlab.cr.net:192.168.102.25&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;register gitlab-runner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;直接使用gitlab-runner注册&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ PROJECT_REGISTRATION_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MbagsxLmj9pYugNaiQdL&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gitlab-runner register &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--non-interactive&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--executor&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;docker&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--docker-image&lt;/span&gt; python:3.4 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--url&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://gitlab.cr.net/&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--registration-token&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PROJECT_REGISTRATION_TOKEN&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--description&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vm-04&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--tag-list&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;crvroute&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--run-untagged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--locked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--docker-tlsverify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--docker-extra-hosts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gitlab.cr.net:192.168.102.25&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;更多配置请参考文档：     &lt;a href=&quot;https://docs.gitlab.com/runner/configuration/advanced-configuration.html&quot;&gt;advanced configure&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;run-gitlab-runner&quot;&gt;run gitlab-runner&lt;/h3&gt;

&lt;p&gt;运行docker中的gitlab-runner镜像&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# run to check it&#39;s ok&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; gitlab-runner &lt;span class=&quot;nt&quot;&gt;--restart&lt;/span&gt; always &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;--add-host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;gitlab.cr.net:192.168.102.25 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /srv/gitlab-runner/config:/etc/gitlab-runner &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   gitlab/gitlab-runner:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;或者直接启动gitlab-runner服务&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gitlab-runner start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;自定义docker-镜像&quot;&gt;自定义docker 镜像&lt;/h3&gt;

&lt;p&gt;由于runner需要与生产环境之间进行通信，所以需要openssl、rsync等应用软件，而由于网络的原因，配置runner所需的环境会花费很长的时间，所以可以自己制作docker镜像，将这些依赖都准备好，加快测试和部署的速度。&lt;/p&gt;

&lt;h4 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;/h4&gt;

&lt;p&gt;Dockerfile&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;# Use an official Python runtime as a parent image
FROM python:3.4

# Copy the current directory contents into the container at /app
COPY requirements.txt /requirements.txt

# Install any needed packages specified in requirement.txt
RUN pip install --trusted-host pypi.python.org -r requirements.txt

# Update
RUN apt-get update -y &amp;amp;&amp;amp; \
  apt-get install -y expect, openssh-client, rsync &amp;amp;&amp;amp; \
  apt-get install -y software-properties-common &amp;amp;&amp;amp; \
  apt-get install -y openvswitch-switch &amp;amp;&amp;amp; \
  apt-get autoremove -y &amp;amp;&amp;amp; \
  apt-get clean

# Make port 80 available to the world outside this container
# EXPOSE 80

# Define environment variable
# ENV NAME World

# Run app.py when the container launches
# CMD [&quot;python&quot;, &quot;app.py&quot;]

&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; crsys-gitlab-runner:2.0 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker image tag crsys-gitlab-runner:2.0 192.168.120.11:5002/crsys-gitlab-runner:2.0
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker push 192.168.120.11:5002/crsys-gitlab-runner:2.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;change .gitlab-ci.yml&lt;/p&gt;

&lt;h4 id=&quot;docker-commit&quot;&gt;docker commit&lt;/h4&gt;

&lt;p&gt;启动一个docker容器并进入该容器&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; production python:3.5
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; eb789ffd636f /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配置production容器的依赖环境&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@eb789ffd636f:/# cp /etc/apt/sources.list /etc/apt/sources.list_bak
root@eb789ffd636f:/# sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;s/deb.debian.org/mirrors.ustc.edu.cn/g&#39;&lt;/span&gt; /etc/apt/sources.list
root@eb789ffd636f:/# apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; update
root@eb789ffd636f:/# apt-get install &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; openvswitch-switch
root@eb789ffd636f:/# mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /usr/local/etc/openvswitch
root@eb789ffd636f:/# mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /var/run/openvswitch/
root@eb789ffd636f:/# ovsdb-tool create usr/local/etc/openvswitch/conf.db /usr/share/openvswitch/vswitch.ovsschema
root@eb789ffd636f:/# ovsdb-server /usr/local/etc/openvswitch/conf.db &lt;span class=&quot;nt&quot;&gt;--remote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;punix:/var/run/openvswitch/db.sock &lt;span class=&quot;nt&quot;&gt;--pidfile&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--detach&lt;/span&gt;
root@eb789ffd636f:/# ovs-vsctl &lt;span class=&quot;nt&quot;&gt;--no-wait&lt;/span&gt; init
root@eb789ffd636f:/# ovs-vswitchd &lt;span class=&quot;nt&quot;&gt;--pidfile&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--detach&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--log-file&lt;/span&gt;
root@eb789ffd636f:/# pip install virtualenv
root@eb789ffd636f:/# apt-get install &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; expect openssh-client
root@eb789ffd636f:/# apt-get install &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; software-properties-common
root@eb789ffd636f:/# apt-get autoremove &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
root@eb789ffd636f:/# apt-get clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;打包该镜像&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker commit &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;wmh&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;production env&quot;&lt;/span&gt; 容器名称或id crsys-gitlab-runner:3.0
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker image tag crsys-gitlab-runner:3.0 192.168.120.11:5002/crsys-gitlab-runner:3.0
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker push 192.168.120.11:5002/crsys-gitlab-runner:3.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;runner变量&quot;&gt;runner变量&lt;/h3&gt;

&lt;p&gt;gitlab的变量配置如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-11-gitlab-CI-configure/image-20201112202853609.png&quot; alt=&quot;image-20201112202853609&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;deploy_key_file：存放生产环境中用来访问gitlab的公钥文件路径。&lt;/li&gt;
  &lt;li&gt;flask_dir：flask app所在的路径&lt;/li&gt;
  &lt;li&gt;git_repo_src：git仓库地址&lt;/li&gt;
  &lt;li&gt;prod_env_passwd：生产环境的sudo密码&lt;/li&gt;
  &lt;li&gt;production_dir：生产环境存放从git上拉取的文件路径&lt;/li&gt;
  &lt;li&gt;ssh_private_key：gitlab-runner免密登录生产环境所需的私钥&lt;/li&gt;
  &lt;li&gt;virtualenv_dirname：虚拟环境的名称&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;gitlab-runner---production_env&quot;&gt;gitlab-runner &amp;lt;-&amp;gt; production_env&lt;/h2&gt;

&lt;p&gt;gitlab-runner的管道中可以存在多个task，一般默认为test build deploy。在这些阶段中设置runner与production通信，下发相关命令到生产环境中实现项目的部署。&lt;/p&gt;

&lt;h3 id=&quot;ansible&quot;&gt;ansible&lt;/h3&gt;

&lt;p&gt;ansible是新出现的自动化运维工具，基于Python开发，集合了众多运维工具（puppet、cfengine、chef、func、fabric）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能，Ansible默认通过 SSH 协议管理机器。&lt;/p&gt;

&lt;p&gt;ansible是基于模块工作的，本身没有批量部署的能力。真正具有批量部署的是ansible所运行的模块，ansible只是提供一种框架。主要包括：&lt;/p&gt;

&lt;p&gt;(1)、连接插件connection plugins：负责和被监控端实现通信；&lt;/p&gt;

&lt;p&gt;(2)、host inventory：指定操作的主机，是一个配置文件里面定义监控的主机；&lt;/p&gt;

&lt;p&gt;(3)、各种模块核心模块、command模块、自定义模块；&lt;/p&gt;

&lt;p&gt;(4)、借助于插件完成记录日志邮件等功能；&lt;/p&gt;

&lt;p&gt;(5)、playbook：剧本执行多个任务时，非必需可以让节点一次性运行多个任务。&lt;/p&gt;

&lt;h3 id=&quot;ansible-playbook&quot;&gt;ansible-playbook&lt;/h3&gt;

&lt;p&gt;Playbooks 与 adhoc 相比,是一种完全不同的运用 ansible 的方式.&lt;/p&gt;

&lt;p&gt;简单来说,playbooks 是一种简单的配置管理系统与多机器部署系统的基础.与现有的其他系统有不同之处,且非常适合于复杂应用的部署.&lt;/p&gt;

&lt;p&gt;Playbooks 可用于声明配置,更强大的地方在于,在 playbooks 中可以编排有序的执行过程,甚至于做到在多组机器间,来回有序的执行特别指定的步骤.并且可以同步或异步的发起任务.&lt;/p&gt;

&lt;p&gt;我们使用 adhoc 时,主要是使用 /usr/bin/ansible 程序执行任务.而使用 playbooks 时,更多是将之放入源码控制之中,用之推送你的配置或是用于确认你的远程系统的配置是否符合配置规范.&lt;/p&gt;

&lt;p&gt;Playbooks 的格式是YAML（详见:&lt;a href=&quot;http://www.ansible.com.cn/docs/YAMLSyntax.html&quot;&gt;&lt;em&gt;YAML 语法&lt;/em&gt;&lt;/a&gt;）,语法做到最小化,意在避免 playbooks 成为一种编程语言或是脚本,但它也并不是一个配置模型或过程的模型.&lt;/p&gt;

&lt;p&gt;playbook 由一个或多个 ‘plays’ 组成.它的内容是一个以 ‘plays’ 为元素的列表.&lt;/p&gt;

&lt;p&gt;在 play 之中,一组机器被映射为定义好的角色.在 ansible 中,play 的内容,被称为 tasks,即任务.在基本层次的应用中,一个任务是一个对 ansible 模块的调用.&lt;/p&gt;

&lt;p&gt;配置文件的代码如下所示，可以分为三个阶段：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;拉取代码&lt;/p&gt;

    &lt;p&gt;设置生产环境从gitlab-runner中拉取代码，避免runner和production_env之间的文件传输。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装虚拟环境&lt;/p&gt;

    &lt;p&gt;将项目所需的应用软件安装到虚拟环境中，注意虚拟环境中的pip版本可能和实际的生产环境中的有所不同。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;启动项目&lt;/p&gt;

    &lt;p&gt;创建项目所需的日志和运行文件夹：/var/log/cr-vroute /var/run/cr-vroute。&lt;/p&gt;

    &lt;p&gt;调整权限后重启服务。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pull code from  to &quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;accept_hostkey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;force&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtualenv&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;become_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;virtualenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;//&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;virtualenv_python&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;python3&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;requirements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/requirements.txt&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;extra_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-i https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host pypi.tuna.tsinghua.edu.cn&quot;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;become_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vroute&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;0755&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;does&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;become_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vroute&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directory&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;0755&#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dictionary&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scripts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/bin/cr-vroute&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;touch&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;0755&#39;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vroute&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;become_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/bin/cr-vroute stop&quot;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vroute&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;become&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;become_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/bin/cr-vroute start&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;key-pair&quot;&gt;key pair&lt;/h3&gt;

&lt;p&gt;利用ssh的密钥对实现gitlab-runner和生产环境之间的免密登录。首先生成一对秘钥，将公钥发送到ubuntu@ADDR_VM01，并在gitlab CI/CD配置中添加secret变量：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;变量名为 SSH_PRIVATE_KEY，内容填写输出的私钥&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@eb789ffd636f:/# ssh-keygen
Generating public/private rsa key pair.
Enter file &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;which to save the key &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/root/.ssh/id_rsa&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 
Created directory &lt;span class=&quot;s1&quot;&gt;&#39;/root/.ssh&#39;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Enter passphrase &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;empty &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;no passphrase&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 
Enter same passphrase again: 
Your identification has been saved &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /root/.ssh/id_rsa.
Your public key has been saved &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /root/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:jBNpEw4YHXCax+eu6JU6KOakMs+F9h7LGZSGavq2IuI root@baseimage
The key&lt;span class=&quot;s1&quot;&gt;&#39;s randomart image is:
+---[RSA 2048]----+
|  o=+..          |
|  .=.o o         |
|  o o B          |
|   o = =         |
|  . + + S        |
| . + o .         |
|.+o * .          |
|&amp;amp;+oB *           |
|@EO+B            |
+----[SHA256]-----+
root@baseimage:/# ssh-copy-id -i ~/.ssh/id_rsa username@$production_env
/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: &quot;/root/.ssh/id_rsa.pub&quot;
/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
nsr@192.168.xxx.xxx&#39;&lt;/span&gt;s password: 

Number of key&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; added: 1

Now try logging into the machine, with:   &lt;span class=&quot;s2&quot;&gt;&quot;ssh &#39;username@192.168.xxx.xxx&#39;&quot;&lt;/span&gt;
and check to make sure that only the key&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;s&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; you wanted were added.
root@baseimage:/# &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ~/.ssh/id_rsa
&lt;span class=&quot;nt&quot;&gt;-----BEGIN&lt;/span&gt; RSA PRIVATE KEY-----
MIIEpQIBAAKCAQEAxx0Dt1ryLXVHBkPuvra3l85nLeDPRKLyR00Z8XR/aFv8v0vF
ZJecQ289n6aySm+uJ9gXUWfeDx/PuRGTgoa8ZDNew9I2+NKiwOKVFu7tsnCU6B2b
nenL8ScO6sk9NcJZuNBZITeuK/LAC7pa9fl39ixdWPBoe4n8hRa2nEWmrPek7v6I
mtRIDPUgKhLrqogmWWTT4j2r3Gr/UjgnIEbkq3LIUQTJIdkZLQmDi9s+H9Kct+NB
ndnRBFHjuR5MN1gTtfXT7HkphNCyJzF+IGn7VsJsY1f7wZaSlGKZn3NnejBT3G76
KYsH5UJcmvEckM4nZjX26DQEh5ihHw+utzIK5QIDAQABAoIBAQCqtNJp0XwNwx1Y
XseCFG7EpL3LFJE+vCDRRmX2n7VXyH2hmBmsy1q6adXAWY9DyAncuSQMs+sqtlBF
z67S2icMFQqrAkAFBblpexjtJ3z8Xg8cDb5MHZSutJjSbCOhQnXfwCiaFP2rShyi
MWwotG/Hy3NgfARn3f50L+vxgLmMUeNwdl6rvNkyHhI9/uto4+i+2kgrhv0n1YuB
18/5MQd8G9kYjvrHxhlqqLPvKawCjNVDoUv6s4MDjjkNTkooPV5CkCbisrRyENQm
+1Jv6e3pm/JCx/CVGJCLA32f/q2fWrREsVyFGo4/vxJxMk7Uu1GLIVgq9HVbp8hR
BPrJGoLlAoGBAPscvNZTNAMjslrbKubUEqCGRIQjk9y/DuYPkHk6M5+olM3GD2YY
0s5AtuquzzZ5JnyOigGwHwrQs75b8SgxfsF2T/iKKt09wB6ayNRfioT3BXFzIIVj
VPyHU/VcdyL30QJYBlEg1PFQPh59RgV5Az5fujET64q/5H4bdGUb7CEjAoGBAMr9
LCdtvbBfy0hKOx0ADSHnSY8N4tOy9I6hmI7cndbVCzK7lQV5eh/atlt269bmCCOj
7lcGKrjBhRyBGJE6c9tPGJuUWBRZ4p3pAKuPp650Nue1MvfiChoqN4DgOmSxuBIV
c/oZwqJpMrAVdGEKRONRo4UTMBpkA1eVp5lsAphXAoGAfboEvlaISy4bRaxITaxO
6zpuoa5igPrUDdIrJtdCM6UnY+PPn/G70nLKYrRFoWOFJoYDiRbSZArcg+nq05H8
gganwawEDCO3xlr/RH3Vj/9SJVxcIwz55zomiknSiJqFdmP2PbZvh6cCgyd74I+X
VSp+wcXUf/LWB2HdpCYX0vsCgYEAxMwjbK6Wg1K8UP+2w+zyznXf+RNrX/dV5pqA
v7DgThIKY0s9tSsK3as7tP1ctOIb7gHW5wQRk0H7faEjYlmbTXonz15I7qIedR4b
CjmiRh5hxM8F9RFu3eMkIIxD0LAEV3P5Fva2nqMDA3gpdpNwKjtSH4h00IE6REXR
UYtIEM0CgYEA18yX+rzOOSS/V/ut8ajRUUuxFnUAbMIg+3wk2lkrt2pA/5QmQI/7
IVxCHmtzYiMFK/lNqwadg75B2Syw8/nQI5YU6E94b3S+l1rzGoItYdRIQsdWL/iL
VryMAG1U4bce34bs5pKA4WFiXmbcD/OECguYARj2zSQjvg+o6j3FTDo&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-----END&lt;/span&gt; RSA PRIVATE KEY-----
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;配置生产环境&quot;&gt;配置生产环境&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ubuntu@vRoute:/# &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; openvswitch-switch
ubuntu@vRoute:/# &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /usr/local/etc/openvswitch
ubuntu@vRoute:/# &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /var/run/openvswitch/
ubuntu@vRoute:/# &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovsdb-tool create usr/local/etc/openvswitch/conf.db /usr/share/openvswitch/vswitch.ovsschema
ubuntu@vRoute:/# &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovsdb-server /usr/local/etc/openvswitch/conf.db &lt;span class=&quot;nt&quot;&gt;--remote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;punix:/var/run/openvswitch/db.sock &lt;span class=&quot;nt&quot;&gt;--pidfile&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--detach&lt;/span&gt;
ubuntu@vRoute:/# &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vsctl &lt;span class=&quot;nt&quot;&gt;--no-wait&lt;/span&gt; init
ubuntu@vRoute:/# &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ovs-vswitchd &lt;span class=&quot;nt&quot;&gt;--pidfile&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--detach&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--log-file&lt;/span&gt;
ubuntu@vRoute:/# &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;production_env---repo&quot;&gt;production_env -&amp;gt; repo&lt;/h2&gt;

&lt;p&gt;同上生成ssh key pair,不同的是在生产环境系统下操作，之后将公钥上传到gitlab。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ubuntu@production_env:/# ssh-keygen 
Generating public/private rsa key pair.
Enter file &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;which to save the key &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/root/.ssh/id_rsa&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 
Enter passphrase &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;empty &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;no passphrase&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 
Enter same passphrase again: 
Your identification has been saved &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /root/.ssh/id_rsa.
Your public key has been saved &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /root/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:DCCgzLEbQDzgMO03qsLyCeMlH/rnOU31oF6Vt3icG+E root@production_env
The key&lt;span class=&quot;s1&quot;&gt;&#39;s randomart image is:
+---[RSA 2048]----+
|X=. .            |
|B++. .           |
|.B.   .     .    |
|  + o  o o o o   |
| . o .  S + = +  |
|  .    o . o E   |
|+o o  + .   . o  |
|=+=..o.o     .   |
|o++ooo.          |
+----[SHA256]-----+

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;至此，就实现了repo、gitlab-runner和production_env之间的互相通信。&lt;/p&gt;

&lt;h2 id=&quot;trouble-shooting&quot;&gt;Trouble shooting&lt;/h2&gt;

&lt;h3 id=&quot;docker-is-not-active&quot;&gt;docker is not active&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-11-gitlab-CI-configure/image-20201104160836058.png&quot; alt=&quot;image-20201104160836058&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是因为镜像没有启动&lt;/p&gt;

&lt;h3 id=&quot;docker-pull-error&quot;&gt;docker pull error&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-11-gitlab-CI-configure/image-20201105203130082.png&quot; alt=&quot;image-20201105203130082&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因为docker在之后的版本中默认使用了https设置，导致协议不匹配所以出现了错误&lt;/p&gt;

&lt;p&gt;编辑/etc/default/docker，在其中添加:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;DOCKER_OPTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--insecure-registry=192.168.120.11:5002&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重启docker后发现仍然存在错误：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-11-gitlab-CI-configure/image-20201105204840077.png&quot; alt=&quot;image-20201105204840077&quot; /&gt;&lt;/p&gt;

&lt;p&gt;是因为5000端口已经被uwsgi占用，因此docker无法解析该应用回复的响应。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull registry:2
docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 5002:5000 &lt;span class=&quot;nt&quot;&gt;--restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always registry:2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;运行成功之后使用curl http://localhost:5002却出现connect refused的错误，经过对端口进行检查之后发现&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-11-gitlab-CI-configure/image-20201106094918602.png&quot; alt=&quot;image-20201106094918602&quot; /&gt;&lt;/p&gt;

&lt;p&gt;修改ubuntu的网络设置，禁用tcp6。打开/etc/sysctl.conf，添加如下三条设置&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   net.ipv6.conf.all.disable_ipv6 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
   net.ipv6.conf.default.disable_ipv6 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
   net.ipv6.conf.lo.disable_ipv6 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;保存后退出，执行sudo sysctl -p。经过测试后发现不是这个原因，可能是因为宿主机和容器端口映射设置错误，将启动容器的端口设置修改为-p 5002:5000后可以成功访问http://localhost:5002。&lt;/p&gt;

&lt;p&gt;为了使gitlab-runner中的docker可以接受http协议，在启动gitlab-runner容器的时候设定tls_vertify=true&lt;/p&gt;

&lt;h3 id=&quot;本地调试&quot;&gt;本地调试&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-11-gitlab-CI-configure/image-20201106102748598.png&quot; alt=&quot;image-20201106102748598&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一直push到gitlab上太麻烦了，所以使用gitlab-runner exec进行本地调试&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gitlab-runner &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;docker test_staging 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在docker的镜像中进行本地调试会出现很多错误：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;无法正确clone&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;修改.gitlab.yml，添加如下内容：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GIT_STRATEGY&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;none&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;docker无法启动&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;启动docker时设置–privilege&lt;/p&gt;

&lt;h3 id=&quot;cd导致的权限问题&quot;&gt;cd导致的权限问题&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-11-gitlab-CI-configure/image-20201109000402307.png&quot; alt=&quot;image-20201109000402307&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在gitlab-runner中使用了cd [dictionary]会导致文件夹只读。&lt;/p&gt;
</description>
        <pubDate>Wed, 11 Nov 2020 12:51:40 +0800</pubDate>
        <link>http://2bebetter.github.io/gitlab/2020/11/11/gitlab-CI-configure/</link>
        <guid isPermaLink="true">http://2bebetter.github.io/gitlab/2020/11/11/gitlab-CI-configure/</guid>
        
        
        <category>gitlab</category>
        
      </item>
    
      <item>
        <title>第一版Gitlab CI/CD配置</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#概览&quot; id=&quot;markdown-toc-概览&quot;&gt;概览&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#注册gitlab-runner&quot; id=&quot;markdown-toc-注册gitlab-runner&quot;&gt;注册gitlab runner&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#install-gitlab-runner&quot; id=&quot;markdown-toc-install-gitlab-runner&quot;&gt;install gitlab-runner&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#install-from-apt&quot; id=&quot;markdown-toc-install-from-apt&quot;&gt;install from apt&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#install-from-docker&quot; id=&quot;markdown-toc-install-from-docker&quot;&gt;install from docker&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#setup-gitlab-runner&quot; id=&quot;markdown-toc-setup-gitlab-runner&quot;&gt;setup gitlab-runner&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#register-gitlab-runner&quot; id=&quot;markdown-toc-register-gitlab-runner&quot;&gt;register gitlab-runner&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#run-gitlab-runner&quot; id=&quot;markdown-toc-run-gitlab-runner&quot;&gt;run gitlab-runner&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#自定义docker-镜像&quot; id=&quot;markdown-toc-自定义docker-镜像&quot;&gt;自定义docker 镜像&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#dockerfile&quot; id=&quot;markdown-toc-dockerfile&quot;&gt;Dockerfile&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#docker-commit&quot; id=&quot;markdown-toc-docker-commit&quot;&gt;docker commit&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#trouble-shooting&quot; id=&quot;markdown-toc-trouble-shooting&quot;&gt;Trouble shooting&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#docker-is-not-active&quot; id=&quot;markdown-toc-docker-is-not-active&quot;&gt;docker is not active&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#docker-pull-error&quot; id=&quot;markdown-toc-docker-pull-error&quot;&gt;docker pull error&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#本地调试&quot; id=&quot;markdown-toc-本地调试&quot;&gt;本地调试&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cd导致的权限问题&quot; id=&quot;markdown-toc-cd导致的权限问题&quot;&gt;cd导致的权限问题&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#todo&quot; id=&quot;markdown-toc-todo&quot;&gt;ToDo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;cyberrange项目cr-vroute子系统gitlab CI/CD配置说明。&lt;/p&gt;

&lt;h2 id=&quot;概览&quot;&gt;概览&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph TD;
	Repo-- clone repo, by gitlab internal --&amp;gt; gitlab_runner1;
	Repo-- clone repo, by gitlab internal --&amp;gt; gitlab_runner2;
	Repo-- clone repo, by gitlab internal --&amp;gt; gitlab_runner3;
	Repo-- clone repo, by gitlab internal --&amp;gt; gitlab_runner4;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;图示解释：&lt;/p&gt;

&lt;p&gt;gitlab runner从repo下拉代码。进行构建，测试等操作，其权限来自与runner配置时使用的token，不需要额外配置，只要正常注册了gitlab runner就可以，由gitlab帮我们搞定。&lt;/p&gt;

&lt;h2 id=&quot;注册gitlab-runner&quot;&gt;注册gitlab runner&lt;/h2&gt;

&lt;p&gt;根据文档运行gitlab-runner，并注册到相应的repo即可，参考&lt;a href=&quot;https://docs.gitlab.com/ee/ci/&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;install-gitlab-runner&quot;&gt;install gitlab-runner&lt;/h3&gt;

&lt;h4 id=&quot;install-from-apt&quot;&gt;install from apt&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash
apt-get install gitlab-runner
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;install-from-docker&quot;&gt;install from docker&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;修改apt的源：&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;deb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse
deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Update the &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt; package index and install packages to allow &lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt; to use a repository over HTTPS:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;su
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; update
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; upgrade
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; install &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    apt-transport-https &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    ca-certificates &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    curl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    gnupg-agent &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    software-properties-common
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Add Docker’s official GPG key:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-key add -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Verify that you now have the key with the fingerprint&lt;code class=&quot;highlighter-rouge&quot;&gt;9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88&lt;/code&gt;, by searching for the last 8 characters of the fingerprint.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-key fingerprint 0EBFCD88
/etc/apt/trusted.gpg
&lt;span class=&quot;nt&quot;&gt;--------------------&lt;/span&gt;
pub   1024D/437D05B5 2004-09-12
      Key fingerprint &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 6302 39CC 130E 1A7F D81A  27B1 4097 6EAF 437D 05B5
uid                  Ubuntu Archive Automatic Signing Key &amp;lt;ftpmaster@ubuntu.com&amp;gt;
sub   2048g/79164387 2004-09-12

pub   1024D/FBB75451 2004-12-30
      Key fingerprint &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; C598 6B4F 1257 FFA8 6632  CBA7 4618 1433 FBB7 5451
uid                  Ubuntu CD Image Automatic Signing Key &amp;lt;cdimage@ubuntu.com&amp;gt;

pub   4096R/C0B21F32 2012-05-11
      Key fingerprint &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 790B C727 7767 219C 42C8  6F93 3B4F E6AC C0B2 1F32
uid                  Ubuntu Archive Automatic Signing Key &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2012&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;lt;ftpmaster@ubuntu.com&amp;gt;

pub   4096R/EFE21092 2012-05-11
      Key fingerprint &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 8439 38DF 228D 22F7 B374  2BC0 D94A A3F0 EFE2 1092
uid                  Ubuntu CD Image Automatic Signing Key &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2012&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;lt;cdimage@ubuntu.com&amp;gt;

pub   4096R/0EBFCD88 2017-02-22
      Key fingerprint &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88
uid                  Docker Release &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;CE deb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &amp;lt;docker@docker.com&amp;gt;
sub   4096R/F273FCD8 2017-02-22
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Use the following command to set up the &lt;strong&gt;stable&lt;/strong&gt; repository. To add the &lt;strong&gt;nightly&lt;/strong&gt; or &lt;strong&gt;test&lt;/strong&gt; repository, add the word &lt;code class=&quot;highlighter-rouge&quot;&gt;nightly&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; (or both) after the word &lt;code class=&quot;highlighter-rouge&quot;&gt;stable&lt;/code&gt; in the commands below. &lt;a href=&quot;https://docs.docker.com/engine/install/&quot;&gt;Learn about &lt;strong&gt;nightly&lt;/strong&gt; and &lt;strong&gt;test&lt;/strong&gt; channels&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;add-apt-repository &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;s2&quot;&gt;&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;lsb_release &lt;span class=&quot;nt&quot;&gt;-cs&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
   stable&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在尝试了几次之后发现这一步骤对ubuntu14.04.6并不适用，将源更换为阿里源后成功&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;add-apt-repository &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;s2&quot;&gt;&quot;deb [arch=amd64]  
   http://mirrors.aliyun.com/docker-ce/linux/ubuntu &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;lsb_release &lt;span class=&quot;nt&quot;&gt;-cs&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
   stable&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;install docker engine&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; update
 &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; install docker-ce
 &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;service docker start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;setup-gitlab-runner&quot;&gt;setup gitlab-runner&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# pull image&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker pull gitlab/gitlab-runner
Using default tag: latest
latest: Pulling from gitlab/gitlab-runner
d72e567cc804: Pull &lt;span class=&quot;nb&quot;&gt;complete
&lt;/span&gt;0f3630e5ff08: Pull &lt;span class=&quot;nb&quot;&gt;complete
&lt;/span&gt;b6a83d81d1f4: Pull &lt;span class=&quot;nb&quot;&gt;complete
&lt;/span&gt;795a1e0f662d: Pull &lt;span class=&quot;nb&quot;&gt;complete
&lt;/span&gt;e26343354a23: Pull &lt;span class=&quot;nb&quot;&gt;complete
&lt;/span&gt;df2906232f5a: Pull &lt;span class=&quot;nb&quot;&gt;complete
&lt;/span&gt;e9423d1eea92: Pull &lt;span class=&quot;nb&quot;&gt;complete
&lt;/span&gt;45a5486ea8e3: Pull &lt;span class=&quot;nb&quot;&gt;complete
&lt;/span&gt;Digest: sha256:07d7c6d82b11646aa048427fadd9a1c0e5faa1efcea7e06689eadcf9b52da006
Status: Downloaded newer image &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;gitlab/gitlab-runner:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;register-gitlab-runner&quot;&gt;register gitlab-runner&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;register gitlab-runner using docker&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考：&lt;a href=&quot;https://docs.gitlab.com/runner/register/index.html#docker&quot;&gt;configure gitlab-runner&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--add-host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gitlab.cr.net:192.168.102.25&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register
Runtime platform                                    &lt;span class=&quot;nv&quot;&gt;arch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;amd64 &lt;span class=&quot;nv&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;linux &lt;span class=&quot;nv&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;6 &lt;span class=&quot;nv&quot;&gt;revision&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;fa86510e &lt;span class=&quot;nv&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;11.9.2
Running &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;system-mode.                            
                                                   
Please enter the gitlab-ci coordinator URL &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;e.g. https://gitlab.com/&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
http://gitlab.cr.net/
Please enter the gitlab-ci token &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;this runner:
&lt;span class=&quot;nv&quot;&gt;$PROJECT_REGISTRATION_TOKEN&lt;/span&gt;
Please enter the gitlab-ci description &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;this runner:
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;a902a1cd5b80]: django-test
Please enter the gitlab-ci tags &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;this runner &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;comma separated&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
django, &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;或者使用命令行注册&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ PROJECT_REGISTRATION_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MbagsxLmj9pYugNaiQdL&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--add-host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gitlab.cr.net:192.168.102.25&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--non-interactive&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--executor&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;docker&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--docker-image&lt;/span&gt; python:3.4 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--url&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://gitlab.cr.net/&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--registration-token&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PROJECT_REGISTRATION_TOKEN&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--description&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;crvroutesys&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--tag-list&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;crvroute&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--run-untagged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--locked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--docker-tlsverify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--docker-extra-hosts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gitlab.cr.net:192.168.102.25&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;register gitlab-runner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;直接使用gitlab-runner注册&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ PROJECT_REGISTRATION_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MbagsxLmj9pYugNaiQdL&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gitlab-runner register &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--non-interactive&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--executor&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;docker&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--docker-image&lt;/span&gt; python:3.4 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--url&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://gitlab.cr.net/&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--registration-token&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PROJECT_REGISTRATION_TOKEN&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--description&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;vm-04&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--tag-list&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;crvroute&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--run-untagged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--locked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--docker-tlsverify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--docker-extra-hosts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gitlab.cr.net:192.168.102.25&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;更多配置请参考文档：     &lt;a href=&quot;https://docs.gitlab.com/runner/configuration/advanced-configuration.html&quot;&gt;advanced configure&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;run-gitlab-runner&quot;&gt;run gitlab-runner&lt;/h3&gt;

&lt;p&gt;运行docker中的gitlab-runner镜像&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# run to check it&#39;s ok&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; gitlab-runner &lt;span class=&quot;nt&quot;&gt;--restart&lt;/span&gt; always &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;--add-host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;gitlab.cr.net:192.168.102.25 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /srv/gitlab-runner/config:/etc/gitlab-runner &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   gitlab/gitlab-runner:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;或者直接启动gitlab-runner服务&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gitlab-runner start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;自定义docker-镜像&quot;&gt;自定义docker 镜像&lt;/h2&gt;

&lt;p&gt;由于网络的原因，每次下载rsync以及更新requirements.txt都很耗时，可以自己制作docker镜像，将这些依赖都准备好，加快测试和部署的速度。&lt;/p&gt;

&lt;h3 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;/h3&gt;

&lt;p&gt;Dockerfile&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Dockerfile&quot;&gt;# Use an official Python runtime as a parent image
FROM python:3.4

# Copy the current directory contents into the container at /app
COPY requirements.txt /requirements.txt

# Install any needed packages specified in requirement.txt
RUN pip install --trusted-host pypi.python.org -r requirements.txt

# Update
RUN apt-get update -y &amp;amp;&amp;amp; \
  apt-get install -y expect, openssh-client, rsync &amp;amp;&amp;amp; \
  apt-get install -y software-properties-common &amp;amp;&amp;amp; \
  apt-get install -y openvswitch-switch &amp;amp;&amp;amp; \
  apt-get autoremove -y &amp;amp;&amp;amp; \
  apt-get clean

# Make port 80 available to the world outside this container
# EXPOSE 80

# Define environment variable
# ENV NAME World

# Run app.py when the container launches
# CMD [&quot;python&quot;, &quot;app.py&quot;]

&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; crsys-gitlab-runner:2.0 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker image tag crsys-gitlab-runner:2.0 192.168.120.11:5002/crsys-gitlab-runner:2.0
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker push 192.168.120.11:5002/crsys-gitlab-runner:2.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;change .gitlab-ci.yml&lt;/p&gt;

&lt;h3 id=&quot;docker-commit&quot;&gt;docker commit&lt;/h3&gt;

&lt;p&gt;启动一个docker容器并进入该容器&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; production python:3.4
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; eb789ffd636f /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配置production容器的依赖环境&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@eb789ffd636f:/# cp /etc/apt/sources.list /etc/apt/sources.list_bak
root@eb789ffd636f:/# sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;s/deb.debian.org/mirrors.ustc.edu.cn/g&#39;&lt;/span&gt; /etc/apt/sources.list
root@eb789ffd636f:/# apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; update
root@eb789ffd636f:/# apt-get install &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; openvswitch-switch
root@eb789ffd636f:/# mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /usr/local/etc/openvswitch
root@eb789ffd636f:/# mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /var/run/openvswitch/
root@eb789ffd636f:/# ovsdb-tool create usr/local/etc/openvswitch/conf.db /usr/share/openvswitch/vswitch.ovsschema
root@eb789ffd636f:/# ovsdb-server /usr/local/etc/openvswitch/conf.db &lt;span class=&quot;nt&quot;&gt;--remote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;punix:/var/run/openvswitch/db.sock &lt;span class=&quot;nt&quot;&gt;--pidfile&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--detach&lt;/span&gt;
root@eb789ffd636f:/# ovs-vsctl &lt;span class=&quot;nt&quot;&gt;--no-wait&lt;/span&gt; init
root@eb789ffd636f:/# ovs-vswitchd &lt;span class=&quot;nt&quot;&gt;--pidfile&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--detach&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--log-file&lt;/span&gt;
root@eb789ffd636f:/# pip install virtualenv
root@eb789ffd636f:/# apt-get install &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; expect openssh-client
root@eb789ffd636f:/# apt-get install &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; software-properties-common
root@eb789ffd636f:/# apt-get autoremove &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
root@eb789ffd636f:/# apt-get clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;打包该镜像&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker commit &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;wmh&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;production env&quot;&lt;/span&gt; 容器名称或id crsys-gitlab-runner:3.0
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker image tag crsys-gitlab-runner:3.0 192.168.120.11:5002/crsys-gitlab-runner:3.0
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker push 192.168.120.11:5002/crsys-gitlab-runner:3.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;trouble-shooting&quot;&gt;Trouble shooting&lt;/h2&gt;

&lt;h3 id=&quot;docker-is-not-active&quot;&gt;docker is not active&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/2020-11-04-gitlab-CI-configure/image-20201104160836058.png&quot; alt=&quot;image-20201104160836058&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是因为镜像没有启动&lt;/p&gt;

&lt;h3 id=&quot;docker-pull-error&quot;&gt;docker pull error&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;D:\Git\github\2bebetter.github.io\img\2020-11-04-gitlab-CI-configure\image-20201105203130082.png&quot; alt=&quot;image-20201105203130082&quot; /&gt;&lt;/p&gt;

&lt;p&gt;因为docker在之后的版本中默认使用了https设置，导致协议不匹配所以出现了错误&lt;/p&gt;

&lt;p&gt;编辑/etc/default/docker，在其中添加:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;DOCKER_OPTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--insecure-registry=192.168.120.11:5002&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重启docker后发现仍然存在错误：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;D:\Git\github\2bebetter.github.io\img\2020-11-04-gitlab-CI-configure\image-20201105204840077.png&quot; alt=&quot;image-20201105204840077&quot; /&gt;&lt;/p&gt;

&lt;p&gt;是因为5000端口已经被uwsgi占用，因此docker无法解析该应用回复的响应。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull registry:2
docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 5002:5000 &lt;span class=&quot;nt&quot;&gt;--restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always registry:2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;运行成功之后使用curl http://localhost:5002却出现connect refused的错误，经过对端口进行检查之后发现&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;D:\Git\github\2bebetter.github.io\img\2020-11-04-gitlab-CI-configure\image-20201106094918602.png&quot; alt=&quot;image-20201106094918602&quot; /&gt;&lt;/p&gt;

&lt;p&gt;修改ubuntu的网络设置，禁用tcp6。打开/etc/sysctl.conf，添加如下三条设置&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   net.ipv6.conf.all.disable_ipv6 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
   net.ipv6.conf.default.disable_ipv6 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
   net.ipv6.conf.lo.disable_ipv6 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;保存后退出，执行sudo sysctl -p。经过测试后发现不是这个原因，可能是因为宿主机和容器端口映射设置错误，将启动容器的端口设置修改为-p 5002:5000后可以成功访问http://localhost:5002。&lt;/p&gt;

&lt;p&gt;为了使gitlab-runner中的docker可以接受http协议，在启动gitlab-runner容器的时候设定tls_vertify=true&lt;/p&gt;

&lt;h3 id=&quot;本地调试&quot;&gt;本地调试&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;D:\Git\github\2bebetter.github.io\img\2020-11-04-gitlab-CI-configure\image-20201106102748598.png&quot; alt=&quot;image-20201106102748598&quot; /&gt;&lt;/p&gt;

&lt;p&gt;一直push到gitlab上太麻烦了，所以使用gitlab-runner exec进行本地调试&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gitlab-runner &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;docker test_staging 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在docker的镜像中进行本地调试会出现很多错误：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;无法正确clone&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;修改.gitlab.yml，添加如下内容：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;	&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GIT_STRATEGY&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;none&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;docker无法启动&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;启动docker时设置privilege&lt;/p&gt;

&lt;h3 id=&quot;cd导致的权限问题&quot;&gt;cd导致的权限问题&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;D:\Git\github\2bebetter.github.io\img\2020-11-04-gitlab-CI-configure\image-20201109000402307.png&quot; alt=&quot;image-20201109000402307&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在gitlab-runner中使用了cd [dictionary]会导致文件夹只读。&lt;/p&gt;

&lt;h2 id=&quot;todo&quot;&gt;ToDo&lt;/h2&gt;

&lt;p&gt;由于rsync同步文件存在着诸多权限问题，所以为每个服务器创建了一个runner，但实际上这些runner所做的工作是相同的，后续需要精简，而且将生产环境与gitlab-runner分离对于部署、调试工作都有很大的帮助，因此后续可能会更改为gitlab+production的工作模式。&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Nov 2020 10:21:40 +0800</pubDate>
        <link>http://2bebetter.github.io/jekyll/2020/11/04/gitlab-CI-configure/</link>
        <guid isPermaLink="true">http://2bebetter.github.io/jekyll/2020/11/04/gitlab-CI-configure/</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>SDN Related Work</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#sdn-related-work&quot; id=&quot;markdown-toc-sdn-related-work&quot;&gt;SDN Related Work&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#sdn-routing&quot; id=&quot;markdown-toc-sdn-routing&quot;&gt;SDN Routing&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#machine-learning&quot; id=&quot;markdown-toc-machine-learning&quot;&gt;Machine Learning&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#cfr-rl-traffic-engineering-with-reinforcement-learning-in-sdn&quot; id=&quot;markdown-toc-cfr-rl-traffic-engineering-with-reinforcement-learning-in-sdn&quot;&gt;CFR-RL: Traffic Engineering With Reinforcement Learning in SDN&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#routenet-leveraging-graph-neural-networks-for-network-modeling-and-optimization-in-sdn&quot; id=&quot;markdown-toc-routenet-leveraging-graph-neural-networks-for-network-modeling-and-optimization-in-sdn&quot;&gt;RouteNet: Leveraging Graph Neural Networks for Network Modeling and Optimization in SDN&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#sdn-security&quot; id=&quot;markdown-toc-sdn-security&quot;&gt;SDN Security&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#related-work&quot; id=&quot;markdown-toc-related-work&quot;&gt;Related work&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#bloomstore-dynamic-bloom-filter-based-secure-rule-space-management-scheme-in-sdn&quot; id=&quot;markdown-toc-bloomstore-dynamic-bloom-filter-based-secure-rule-space-management-scheme-in-sdn&quot;&gt;BloomStore: Dynamic Bloom-Filter-based Secure Rule-Space Management Scheme in SDN&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#an-efficient-approach-to-robust-sdn-controller-placement-for-security&quot; id=&quot;markdown-toc-an-efficient-approach-to-robust-sdn-controller-placement-for-security&quot;&gt;An Efficient Approach to Robust SDN Controller Placement for Security&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#load-balancing&quot; id=&quot;markdown-toc-load-balancing&quot;&gt;Load balancing&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#an-energy-efficient-load-distribution-framework-for-sdn-controllers&quot; id=&quot;markdown-toc-an-energy-efficient-load-distribution-framework-for-sdn-controllers&quot;&gt;An energy-efficient load distribution framework for SDN controllers&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#a-trust-management-framework-for-software-defined-network-applications&quot; id=&quot;markdown-toc-a-trust-management-framework-for-software-defined-network-applications&quot;&gt;A trust management framework for software-defined network applications&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#self-healing-and-sdn-bridging-the-gap&quot; id=&quot;markdown-toc-self-healing-and-sdn-bridging-the-gap&quot;&gt;Self-healing and SDN: bridging the gap&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#multi-domain-virtual-network-embedding-with-dynamic-flow-migration-in-software-defined-networks&quot; id=&quot;markdown-toc-multi-domain-virtual-network-embedding-with-dynamic-flow-migration-in-software-defined-networks&quot;&gt;Multi-domain virtual network embedding with dynamic flow migration in software-defined networks&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;sdn-related-work&quot;&gt;SDN Related Work&lt;/h1&gt;

&lt;h2 id=&quot;sdn-routing&quot;&gt;SDN Routing&lt;/h2&gt;

&lt;h3 id=&quot;machine-learning&quot;&gt;Machine Learning&lt;/h3&gt;

&lt;h4 id=&quot;cfr-rl-traffic-engineering-with-reinforcement-learning-in-sdn&quot;&gt;&lt;a href=&quot;https://apps-webofknowledge-com.webvpn.las.ac.cn/full_record.do?product=UA&amp;amp;search_mode=AdvancedSearch&amp;amp;qid=4&amp;amp;SID=6DsnaK11My1YwUPVlix&amp;amp;page=1&amp;amp;doc=4&amp;amp;cacheurlFromRightClick=no&quot;&gt;CFR-RL: Traffic Engineering With Reinforcement Learning in SDN&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;传统的交通工程(TE)解决方案可以通过重新路由尽可能多的流来获得最优或接近最优的性能。然而，当频繁地在网络中重新路由流时，他们通常不会考虑负面影响，比如数据包次序混乱。为了减轻网络干扰的影响，一个有前景的TE解决方案是使用等成本多路径(ECMP)转发大部分流量，并使用软件定义网络(SDN)选择性地重新路由少数关键流量，以平衡网络的链路利用率，其中关键流定义为对网络性能有主要影响的流（例如，最拥塞的链路上的流）。关键流重新路由问题可以分解为两个子问题：（1）识别关键流（2）重新路由它们以实现良好的性能。此外，基于规则的启发式算法不能适应流量矩阵和网络动态的变化，因此不可能基于固定的简单规则来设计该问题的启发式算法。在本文中，我们提出了CFR-RL(临界流重定向-强化学习)，这是一个基于强化学习的方案，它学习一个策略来为每个给定的交通矩阵自动选择临界流。然后，CFR-RL通过制定和解决一个简单的线性规划(LP)问题，重新路由这些选定的关键流，以平衡网络的链路利用率。广泛的评估表明，CFR-RL仅重新路由总流量的10%-21.3%，从而实现接近最佳的性能。&lt;/p&gt;

&lt;h4 id=&quot;routenet-leveraging-graph-neural-networks-for-network-modeling-and-optimization-in-sdn&quot;&gt;&lt;a href=&quot;https://apps-webofknowledge-com.webvpn.las.ac.cn/full_record.do?product=UA&amp;amp;search_mode=AdvancedSearch&amp;amp;qid=4&amp;amp;SID=6DsnaK11My1YwUPVlix&amp;amp;page=1&amp;amp;doc=5&quot;&gt;RouteNet: Leveraging Graph Neural Networks for Network Modeling and Optimization in SDN&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;网络建模是实现自驱动软件定义网络高效运行的关键因素。然而，我们仍然缺乏能够在有限成本下对关键性能指标(KPI)产生准确预测的功能性网络模型，如延迟、抖动或损失。本文提出了一种基于图神经网络(GNN)的新型网络模型RouteNet，该模型能够理解拓扑、路由和输入流量之间的复杂关系，从而准确估计每个源/目的地每个包的时延分布和丢失。RouteNet利用了GNN学习和建模图结构信息，因此，我们的模型能够泛化任意拓扑、路由方案和流量强度。在我们的评估中，我们发现RouteNet能够准确地预测训练中看不到的拓扑、路由和流量的时延分布(平均时延和抖动)和损失(最坏情况MRE = 15.4%)。此外，我们还展示了几个利用我们的GNN模型的KPI预测来实现高效路由优化和网络规划的用例。&lt;/p&gt;

&lt;h2 id=&quot;sdn-security&quot;&gt;SDN Security&lt;/h2&gt;

&lt;h3 id=&quot;related-work&quot;&gt;Related work&lt;/h3&gt;

&lt;h4 id=&quot;bloomstore-dynamic-bloom-filter-based-secure-rule-space-management-scheme-in-sdn&quot;&gt;&lt;a href=&quot;https://apps-webofknowledge-com.webvpn.las.ac.cn/full_record.do?product=UA&amp;amp;search_mode=AdvancedSearch&amp;amp;qid=4&amp;amp;SID=6DsnaK11My1YwUPVlix&amp;amp;page=1&amp;amp;doc=7&amp;amp;cacheurlFromRightClick=no&quot;&gt;BloomStore: Dynamic Bloom-Filter-based Secure Rule-Space Management Scheme in SDN&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;软件定义网络(SDN)通过将复杂和严格的计算任务转移到集中式控制器，提供了一种有效的管理流量负载的方法。它减轻了交换机的负担，交换机的任务是执行基于规则操作对的路由。但是，交换机的流表存储容量有限。它可能不得不面对性能瓶颈，而这又会导致严重的安全漏洞和性能下降。因此，本文提出了SDN中基于动态Bloom-Filter的安全规则空间管理方案BloomStore。BloomStore通过管理网络资源动态地处理数据流量。双重安全检查用于安全数据传输使用双重哈希，即两个独立的哈希函数被用来生成k哈希函数。此外，还提出了分区哈希在bloom数组的bucket中进行插入和查询的方法。结果分析表明，在各种性能参数方面，BloomStore的性能都优于竞争对手的变体。&lt;/p&gt;

&lt;h4 id=&quot;an-efficient-approach-to-robust-sdn-controller-placement-for-security&quot;&gt;&lt;a href=&quot;https://apps-webofknowledge-com.webvpn.las.ac.cn/full_record.do?product=UA&amp;amp;search_mode=AdvancedSearch&amp;amp;qid=4&amp;amp;SID=6DsnaK11My1YwUPVlix&amp;amp;page=1&amp;amp;doc=14&amp;amp;cacheurlFromRightClick=no&quot;&gt;An Efficient Approach to Robust SDN Controller Placement for Security&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;安全是传统网络的关键问题之一。软件定义网络(SDN)通过分离网络的控制平面和数据平面，提高了网络的安全性。为了提高SDN网络的性能，研究人员设计了许多先进的控制器原型，并考虑了控制器的放置问题。然而，链路失效是网络中非常重要的安全问题，极大地影响了SDN网络的安全。在今天，对于链路失败的控制器放置问题仍然是一个挑战。在本文中，我们分别研究了单链路和多链路失效情况下的SDN控制器配置问题。对于单链路故障，我们开发了一种启发式算法来解决控制器配置问题。对于多链路故障，我们引入蒙特卡罗模拟来减少计算开销。我们对真实网络拓扑进行了实验，仿真结果表明启发式算法在取得良好性能的同时，比最优算法节省了更多的时间。&lt;/p&gt;

&lt;h2 id=&quot;load-balancing&quot;&gt;Load balancing&lt;/h2&gt;

&lt;h4 id=&quot;an-energy-efficient-load-distribution-framework-for-sdn-controllers&quot;&gt;&lt;a href=&quot;https://apps-webofknowledge-com.webvpn.las.ac.cn/full_record.do?product=UA&amp;amp;search_mode=AdvancedSearch&amp;amp;qid=4&amp;amp;SID=6DsnaK11My1YwUPVlix&amp;amp;page=1&amp;amp;doc=18&amp;amp;cacheurlFromRightClick=no&quot;&gt;An energy-efficient load distribution framework for SDN controllers&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;软件定义网络(SDN)由于能够根据不同的需求动态配置网络，已经发展成为未来Internet的一个有效平台。我们观察到，随着通信网络的增长，SDN设备的负载和能量需求显著增加。因此，需要对SDN控制器进行高效的建模，平衡负载，优化设备能耗。在本文中，我们提出了一个节能的负荷分配框架和有效的负荷分配和客观上优化网络能耗的流量路由控制器系统模型。该模型通过引入高效节能的路由算法选择过程，实现了基于异构流量需求的负载均衡，降低了能耗。负载均衡方案采用多控制器同步切换迁移技术，而高效路由的新颖之处在于网络设备的休眠和主动模式。为了提高网络的性能，我们提出了负载均衡和节能路由之间的相互作用。大量的仿真结果表明，我们所提出的控制器系统模型的有效性得到了证明，能耗降低了约25%，性能提高了约20%。该模型适用于满足绿色通信标准的现实网络环境。&lt;/p&gt;

&lt;h4 id=&quot;a-trust-management-framework-for-software-defined-network-applications&quot;&gt;&lt;a href=&quot;https://apps-webofknowledge-com.webvpn.las.ac.cn/full_record.do?product=UA&amp;amp;search_mode=AdvancedSearch&amp;amp;qid=4&amp;amp;SID=6DsnaK11My1YwUPVlix&amp;amp;page=1&amp;amp;doc=22&quot;&gt;A trust management framework for software-defined network applications&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;(评估框架)&lt;/p&gt;

&lt;p&gt;SDN (software-defined network, SDN)的出现给现有网络带来了前所未有的创新。SDN的两个最显著的特性是解耦性和可编程性。解耦使得网络管理集中在一个控制平面上。同时，得益于SDN的可编程特性，可以很容易地实现新的组网功能。然而，这些特性也给SDN带来了新的安全问题。通过SDN提供的编程接口，软件工程师可以轻松开发网络应用程序，生成SDN控制平面的组网策略，以指导网络路由。然而，这些新应用的安全性和质量很难保证。恶意或低质量的应用程序可能会破坏整个网络。为了解决这个问题，本文提出了一种新的SDN应用信任管理框架。它可以根据应用程序对网络性能(如时延、丢包率、吞吐量等)的影响来评估应用程序的信任值。这些信任值对SDN中应用程序的管理和选择起到了决定性的作用。我们通过一个基于泛光灯控制器的原型系统来评估该框架的性能。实验结果表明了设计的正确性和有效性。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://apps-webofknowledge-com.webvpn.las.ac.cn/full_record.do?product=UA&amp;amp;search_mode=AdvancedSearch&amp;amp;qid=4&amp;amp;SID=6DsnaK11My1YwUPVlix&amp;amp;page=1&amp;amp;doc=23&quot;&gt;ArchSDN: a reinforcement learning-based autonomous OpenFlow controller with distributed management properties&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;网络控制器的屏蔽能力对网络运营商有信心继续扩展通信网络至关重要。今天的网络可以使用该软件定义网络(SDN)概念分离控制和转换层面，并使用自主自治特性快速应对任何网络活动,同时为网络提供必要的灵活性,支持自定义服务级别协议(SLA)的客户,同时降低资本和运营开支。SDN和自主管理的概念都有一个集中式的架构，需要一个单一的实体管理网络的方方面面，这使得在庞大的物联网世界中管理整个网络变得困难，在这些网络中服务往往是靠近用户，基于边缘的方法是支持5G和超越服务的关键。要支持这种动态和灵活的网络，需要一种方法，通过多个自主的OpenFlow控制器(我们称之为ArchSDN控制器)来分配网络管理职责。通过将OpenFlow交换机分配给不同的ArchSDN控制器，将网络划分为不同的扇区，每个扇区由一个ArchSDN控制器独占控制。这些控制者协调他们的行动，并使用基于强化学习的决策机制来探索、学习和实现接近最佳的端到端通信路径。评估结果表明，所提出的决策系统能够找到接近最优的解决方案，从已获得的结果中学习以改进未来的服务激活结果，并能在不到100毫秒的时间内响应，使网络快速适应通信链路的丢失。&lt;/p&gt;

&lt;h4 id=&quot;self-healing-and-sdn-bridging-the-gap&quot;&gt;&lt;a href=&quot;https://apps-webofknowledge-com.webvpn.las.ac.cn/full_record.do?product=UA&amp;amp;search_mode=AdvancedSearch&amp;amp;qid=4&amp;amp;SID=6DsnaK11My1YwUPVlix&amp;amp;page=1&amp;amp;doc=27&amp;amp;cacheurlFromRightClick=no&quot;&gt;Self-healing and SDN: bridging the gap&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;随着分布式交互应用的普及，为了获得良好的参与者交互体验，必须考虑网络资源的高效和公平分配。在软件定义的网络中，中央控制器的存在为交互式应用程序部署可定制的路由提供了一种新颖的解决方案，它允许对DIAs进行细粒度的资源分配，以实现参与者之间的公平性。但是机遇总是伴随着挑战，广泛分布的用户位置往往需要分配控制器来满足应用的要求。因此，参与者之间的延迟直接受到控制器处理时间的影响。在此背景下，我们解决了DIAs在计算和链路负载方面的公平资源配置问题，目的是平衡SDN网络中多流之间的可实现请求率和公平性。首先，我们将问题表示为控制器加载和路由优化的组合。然后，提出了基于深度学习的主动分配控制器算法和公平路径分配算法来共享瓶颈环节。与目前最先进的贪婪分配算法和优先级分配算法相比，通过跟踪驱动仿真验证了该算法在控制器和链路负载方面具有更好的公平性。&lt;/p&gt;

&lt;h4 id=&quot;multi-domain-virtual-network-embedding-with-dynamic-flow-migration-in-software-defined-networks&quot;&gt;&lt;a href=&quot;https://apps-webofknowledge-com.webvpn.las.ac.cn/full_record.do?product=UA&amp;amp;search_mode=AdvancedSearch&amp;amp;qid=3&amp;amp;SID=5FUOQZPzuNrS9dmyBmq&amp;amp;page=1&amp;amp;doc=34&amp;amp;cacheurlFromRightClick=no&quot;&gt;Multi-domain virtual network embedding with dynamic flow migration in software-defined networks&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;软件定义网络(SDN)解耦了网络的控制面和数据面，并使用一个中央控制器来提供有效使用网络资源和方便的服务提供。SDN中的虚拟化使虚拟SDN网络能够共享公共的物理网络基础设施，从而使它们能够提供通用的服务。在这种设置下，SDN hypervisor支持多个虚拟SDN网络(vSDN)，其中每个vSDN网络都有自己的控制器。为了建立虚拟网络，实现物理网络资源的优化共享，设计了虚拟网络嵌入算法。单域虚拟虚拟机是虚拟虚拟机研究的一个热点问题。然而，在大多数实际场景中，VNs是跨属于不同基础设施提供者(InPs)的异构管理域供应的。&lt;/p&gt;

&lt;p&gt;本文利用不规则细胞学习自动机(ICLA)提出了一种用于多域SDN网络的VNE算法，即vSDN-CLA。我们考虑了两个方面——虚拟节点和链路在多域基片网络中的最优映射，以及SDN控制器在吞吐量和端到端延迟方面的最优配置。我们通过考虑动态流迁移来扩展vSDN-CLA，以实现资源最优路由。我们使用Mininet评估了提议的方案，我们观察到提议的方案在吞吐量、端到端延迟和虚拟网络请求接受率方面优于现有的基准方案在单域和多域环境下。&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Oct 2020 12:51:40 +0800</pubDate>
        <link>http://2bebetter.github.io/thesis/2020/10/27/SDN-related-work/</link>
        <guid isPermaLink="true">http://2bebetter.github.io/thesis/2020/10/27/SDN-related-work/</guid>
        
        
        <category>thesis</category>
        
      </item>
    
      <item>
        <title>Edge Cloud Network</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#edge-cloud-network&quot; id=&quot;markdown-toc-edge-cloud-network&quot;&gt;Edge Cloud Network&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#definition&quot; id=&quot;markdown-toc-definition&quot;&gt;Definition&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#benefits&quot; id=&quot;markdown-toc-benefits&quot;&gt;Benefits&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#related-work&quot; id=&quot;markdown-toc-related-work&quot;&gt;Related work&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#a-novel-load-balancing-and-low-response-delay-framework-for-edge-cloud-network-based-on-sdn&quot; id=&quot;markdown-toc-a-novel-load-balancing-and-low-response-delay-framework-for-edge-cloud-network-based-on-sdn&quot;&gt;A Novel Load Balancing and Low Response Delay Framework for Edge-Cloud Network Based on SDN&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#optimal-vnf-placement-via-deep-reinforcement-learning-in-sdnnfv-enabled-networks&quot; id=&quot;markdown-toc-optimal-vnf-placement-via-deep-reinforcement-learning-in-sdnnfv-enabled-networks&quot;&gt;Optimal VNF Placement via Deep Reinforcement Learning in SDN/NFV-Enabled Networks&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#an-optimal-delay-aware-task-assignment-scheme-for-wireless-sdn-networked-edge-cloudlets&quot; id=&quot;markdown-toc-an-optimal-delay-aware-task-assignment-scheme-for-wireless-sdn-networked-edge-cloudlets&quot;&gt;An optimal delay aware task assignment scheme for wireless SDN networked edge cloudlets&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;edge-cloud-network&quot;&gt;Edge Cloud Network&lt;/h1&gt;

&lt;h2 id=&quot;definition&quot;&gt;Definition&lt;/h2&gt;

&lt;p&gt;边缘云架构用于将权力分散(处理)到网络的边缘(客户端/设备)。传统服务器的计算能力用于执行数据最小化或创建先进的分布式系统等任务。在云模型中，这样的“智能”任务由服务器执行，因此它们可以被转移到其他计算能力较低或几乎没有计算能力的设备上。&lt;/p&gt;

&lt;p&gt;有了边缘云，这些处理任务的很大一部分都被转移到了客户端，这也被称为边缘计算(Edge Computing)。边缘计算通常指物联网(IOT)设备，但也指在设备上处理遥测数据(而不是将原始数据发送到云)的游戏硬件。&lt;/p&gt;

&lt;p&gt;这为企业创造了很多机会，特别是当他们希望在整个应用程序或高密度平台使用中提供低延迟服务时。&lt;/p&gt;

&lt;h2 id=&quot;benefits&quot;&gt;Benefits&lt;/h2&gt;

&lt;p&gt;相较于传统的客户机连接到服务器的模型，边缘云架构中数以千计的客户机相互连接可以更加快速有效地执行较小的处理任务。理想的边缘计算环境使数以百万计的物联网设备形成一个庞大的智能网络，可以执行通常只有在非常大的数据中心才可能执行的任务。&lt;/p&gt;

&lt;p&gt;通过结合Edge和Cloud，我们可以利用分布式系统的力量，在设备上处理数据，然后将数据发送到云中。在这里，可以使用更少(甚至不可用)的处理能力来处理、分析或保存它。&lt;/p&gt;

&lt;p&gt;例如：得益于Edge云架构，共享信息的联网汽车能够自己分析数据，而不用使用服务器的处理能力。与需要在中央服务器上处理的大量数据回程不同，大部分处理工作已经由连接的设备自己完成了。&lt;/p&gt;

&lt;p&gt;边缘云的好处还有很多，包括以服务提供商的身份有效部署新服务，或为联网汽车司机或在线游戏玩家提供低延迟体验。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Contrail Edge Cloud等解决方案将计算、存储和网络资源在基站、集线器、交换站点和中央办公室等轻量级边缘环境中抽象和虚拟化。&lt;/li&gt;
  &lt;li&gt;通过低延迟、自动化和简单的交付，边缘云架构在不牺牲多租户安全云的丰富功能的情况下，加速了网络边缘的服务创建。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;related-work&quot;&gt;Related work&lt;/h2&gt;

&lt;h3 id=&quot;a-novel-load-balancing-and-low-response-delay-framework-for-edge-cloud-network-based-on-sdn&quot;&gt;&lt;a href=&quot;https://ieeexplore.ieee.org/document/8892518&quot;&gt;A Novel Load Balancing and Low Response Delay Framework for Edge-Cloud Network Based on SDN&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;基于软件定义网络(SDNs)的云计算，需要收集更多的数据到云中进行分析，由于互联网容量有限，这会导致更多的冗余数据和更长的服务响应时间。针对这一问题，提出了一种新的服务编排与数据聚合框架(SODA)，该框架将数据编排为服务，并对数据包进行聚合，以减少数据冗余和服务响应延迟。在SODA中，网络被分为三层。1)数据中心层(DCL)。数据中心(DCs)向网络中的所有设备发布具有特定功能的软件，设备将数据编配为服务，并使用软件聚合数据包以减少服务响应延迟。2)中间路由层(MRL)。根据数据包与路由距离的相关性调整该层数据包的路由路径。数据包相关性越高，路由距离越短，为了减少冗余数据，数据包沿同一路由路径传输的概率就越高。3)车辆网络层(VNL)。移动车辆用于在设备之间传输数据包和服务。进行了一系列的实验和仿真。结果表明，与传统方案相比，该方案具有更好的性能。&lt;/p&gt;

&lt;h3 id=&quot;optimal-vnf-placement-via-deep-reinforcement-learning-in-sdnnfv-enabled-networks&quot;&gt;&lt;a href=&quot;https://apps-webofknowledge-com.webvpn.las.ac.cn/full_record.do?product=UA&amp;amp;search_mode=AdvancedSearch&amp;amp;qid=8&amp;amp;SID=7Fz7cFld277jLHIz9RY&amp;amp;page=1&amp;amp;doc=30&amp;amp;cacheurlFromRightClick=no&quot;&gt;Optimal VNF Placement via Deep Reinforcement Learning in SDN/NFV-Enabled Networks&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;新兴的范式——软件定义网络(SDN)和网络功能虚拟化(NFV)——使得在商用设备上运行虚拟网络功能(VNFs)变得可行且可伸缩，从而以更低的成本提供各种网络服务。得益于集中的网络管理，可以在支持SDN/ nfv的网络中收集关于网络设备、流量和资源的大量信息，根据收集到的信息利用机器学习定制算法，有效优化网络性能。本文研究了SDN/ nfv支持的网络中的VNF布局问题，它可以自然地表述为二进制整数规划(BIP)问题。利用深度强化学习，提出了一种基于双深度Q网络的VNF布局算法(DDQN-VNFPA)。具体来说，DDQN从一个巨大的解决方案空间确定最佳解决方案，然后DDQN- vnfpa按照基于阈值的策略放置VNF实例(VNFIs)。我们在一个真实的网络拓扑中通过跟踪驱动模拟来评估DDQN-VNFPA。评估结果表明，与已有文献中的算法相比，DDQN-VNFPA在业务功能链请求的拒绝数和拒绝率、吞吐量、端到端延迟、VNFI运行时间和负载均衡等方面均有较好的网络性能。&lt;/p&gt;

&lt;h3 id=&quot;an-optimal-delay-aware-task-assignment-scheme-for-wireless-sdn-networked-edge-cloudlets&quot;&gt;&lt;a href=&quot;https://apps-webofknowledge-com.webvpn.las.ac.cn/full_record.do?product=UA&amp;amp;search_mode=AdvancedSearch&amp;amp;qid=8&amp;amp;SID=7Fz7cFld277jLHIz9RY&amp;amp;page=1&amp;amp;doc=31&quot;&gt;An optimal delay aware task assignment scheme for wireless SDN networked edge cloudlets&lt;/a&gt;&lt;/h3&gt;

</description>
        <pubDate>Mon, 26 Oct 2020 12:51:40 +0800</pubDate>
        <link>http://2bebetter.github.io/thesis/2020/10/26/edge-cloud-network/</link>
        <guid isPermaLink="true">http://2bebetter.github.io/thesis/2020/10/26/edge-cloud-network/</guid>
        
        
        <category>thesis</category>
        
      </item>
    
  </channel>
</rss>
